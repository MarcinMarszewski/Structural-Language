//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Users//marci//Desktop//Structural-Language//AntlrCSharp//ParserRules.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ParserRulesParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IParserRulesListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] ParserRulesParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] ParserRulesParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction([NotNull] ParserRulesParser.FunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction([NotNull] ParserRulesParser.FunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameter([NotNull] ParserRulesParser.ParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameter([NotNull] ParserRulesParser.ParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] ParserRulesParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] ParserRulesParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] ParserRulesParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] ParserRulesParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakStatement([NotNull] ParserRulesParser.BreakStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakStatement([NotNull] ParserRulesParser.BreakStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.continueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContinueStatement([NotNull] ParserRulesParser.ContinueStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.continueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContinueStatement([NotNull] ParserRulesParser.ContinueStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] ParserRulesParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] ParserRulesParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclaration([NotNull] ParserRulesParser.VariableDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclaration([NotNull] ParserRulesParser.VariableDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.variableDeclarationExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclarationExpression([NotNull] ParserRulesParser.VariableDeclarationExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.variableDeclarationExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclarationExpression([NotNull] ParserRulesParser.VariableDeclarationExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] ParserRulesParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] ParserRulesParser.TypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionStatement([NotNull] ParserRulesParser.ExpressionStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionStatement([NotNull] ParserRulesParser.ExpressionStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.blockStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlockStatement([NotNull] ParserRulesParser.BlockStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.blockStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlockStatement([NotNull] ParserRulesParser.BlockStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] ParserRulesParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] ParserRulesParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] ParserRulesParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] ParserRulesParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] ParserRulesParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] ParserRulesParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.ternary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTernary([NotNull] ParserRulesParser.TernaryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.ternary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTernary([NotNull] ParserRulesParser.TernaryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.binaryLogic"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryLogic([NotNull] ParserRulesParser.BinaryLogicContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.binaryLogic"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryLogic([NotNull] ParserRulesParser.BinaryLogicContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.binaryCompare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryCompare([NotNull] ParserRulesParser.BinaryCompareContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.binaryCompare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryCompare([NotNull] ParserRulesParser.BinaryCompareContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.binaryBitwise"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryBitwise([NotNull] ParserRulesParser.BinaryBitwiseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.binaryBitwise"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryBitwise([NotNull] ParserRulesParser.BinaryBitwiseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.binaryAdditive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryAdditive([NotNull] ParserRulesParser.BinaryAdditiveContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.binaryAdditive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryAdditive([NotNull] ParserRulesParser.BinaryAdditiveContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.binaryMultiplicative"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryMultiplicative([NotNull] ParserRulesParser.BinaryMultiplicativeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.binaryMultiplicative"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryMultiplicative([NotNull] ParserRulesParser.BinaryMultiplicativeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimary([NotNull] ParserRulesParser.PrimaryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimary([NotNull] ParserRulesParser.PrimaryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.createArray"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCreateArray([NotNull] ParserRulesParser.CreateArrayContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.createArray"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCreateArray([NotNull] ParserRulesParser.CreateArrayContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.arrayAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayAssignment([NotNull] ParserRulesParser.ArrayAssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.arrayAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayAssignment([NotNull] ParserRulesParser.ArrayAssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.arrayAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayAccess([NotNull] ParserRulesParser.ArrayAccessContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.arrayAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayAccess([NotNull] ParserRulesParser.ArrayAccessContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCall([NotNull] ParserRulesParser.CallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCall([NotNull] ParserRulesParser.CallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.variableAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableAssignment([NotNull] ParserRulesParser.VariableAssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.variableAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableAssignment([NotNull] ParserRulesParser.VariableAssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.variableAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableAccess([NotNull] ParserRulesParser.VariableAccessContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.variableAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableAccess([NotNull] ParserRulesParser.VariableAccessContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.grouping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGrouping([NotNull] ParserRulesParser.GroupingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.grouping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGrouping([NotNull] ParserRulesParser.GroupingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValue([NotNull] ParserRulesParser.ValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValue([NotNull] ParserRulesParser.ValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.unary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnary([NotNull] ParserRulesParser.UnaryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.unary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnary([NotNull] ParserRulesParser.UnaryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.binaryLogicOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryLogicOp([NotNull] ParserRulesParser.BinaryLogicOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.binaryLogicOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryLogicOp([NotNull] ParserRulesParser.BinaryLogicOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.binaryCompareOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryCompareOp([NotNull] ParserRulesParser.BinaryCompareOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.binaryCompareOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryCompareOp([NotNull] ParserRulesParser.BinaryCompareOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.binaryBitwiseOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryBitwiseOp([NotNull] ParserRulesParser.BinaryBitwiseOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.binaryBitwiseOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryBitwiseOp([NotNull] ParserRulesParser.BinaryBitwiseOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.binaryMultiplicativeOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryMultiplicativeOp([NotNull] ParserRulesParser.BinaryMultiplicativeOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.binaryMultiplicativeOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryMultiplicativeOp([NotNull] ParserRulesParser.BinaryMultiplicativeOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.binaryAdditiveOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryAdditiveOp([NotNull] ParserRulesParser.BinaryAdditiveOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.binaryAdditiveOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryAdditiveOp([NotNull] ParserRulesParser.BinaryAdditiveOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.number"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumber([NotNull] ParserRulesParser.NumberContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.number"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumber([NotNull] ParserRulesParser.NumberContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.true"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTrue([NotNull] ParserRulesParser.TrueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.true"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTrue([NotNull] ParserRulesParser.TrueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ParserRulesParser.false"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFalse([NotNull] ParserRulesParser.FalseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ParserRulesParser.false"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFalse([NotNull] ParserRulesParser.FalseContext context);
}
