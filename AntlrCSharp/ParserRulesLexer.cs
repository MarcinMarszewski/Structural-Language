//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Users//marci//Desktop//Structural Language//AntlrCSharp//ParserRules.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ParserRulesLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FOR=1, WHILE=2, IF=3, ELSE=4, BREAK=5, CONTINUE=6, INT=7, FLOAT=8, TRUE=9, 
		FALSE=10, LROUNDBRACKET=11, RROUNDBRACKET=12, LSQUAREBRACKET=13, RSQUAREBRACKET=14, 
		LCURLYBRACKET=15, RCURLYBRACKET=16, QUESTIONMARK=17, COLON=18, EXCLAMATION=19, 
		SEMICOLON=20, PLUS=21, MINUS=22, RSLASH=23, STAR=24, AND=25, OR=26, CARROT=27, 
		PERCENT=28, SHIFTLEFT=29, SHIFTRIGHT=30, ANDAND=31, OROR=32, EQUALEQUAL=33, 
		EXCLAMATIONEQUAL=34, LESSEQUAL=35, GREATEREQUAL=36, LESS=37, GREATER=38, 
		EQUAL=39, NUMBER=40, IDENTIFIER=41, WS=42;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"FOR", "WHILE", "IF", "ELSE", "BREAK", "CONTINUE", "INT", "FLOAT", "TRUE", 
		"FALSE", "LROUNDBRACKET", "RROUNDBRACKET", "LSQUAREBRACKET", "RSQUAREBRACKET", 
		"LCURLYBRACKET", "RCURLYBRACKET", "QUESTIONMARK", "COLON", "EXCLAMATION", 
		"SEMICOLON", "PLUS", "MINUS", "RSLASH", "STAR", "AND", "OR", "CARROT", 
		"PERCENT", "SHIFTLEFT", "SHIFTRIGHT", "ANDAND", "OROR", "EQUALEQUAL", 
		"EXCLAMATIONEQUAL", "LESSEQUAL", "GREATEREQUAL", "LESS", "GREATER", "EQUAL", 
		"NUMBER", "DIGIT", "IDENTIFIER", "ALPHA", "WS"
	};


	public ParserRulesLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ParserRulesLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'for'", "'while'", "'if'", "'else'", "'break'", "'continue'", "'int'", 
		"'float'", "'true'", "'false'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
		"'?'", "':'", "'!'", "';'", "'+'", "'-'", "'/'", "'*'", "'&'", "'|'", 
		"'^'", "'%'", "'<<'", "'>>'", "'&&'", "'||'", "'=='", "'!='", "'<='", 
		"'>='", "'<'", "'>'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FOR", "WHILE", "IF", "ELSE", "BREAK", "CONTINUE", "INT", "FLOAT", 
		"TRUE", "FALSE", "LROUNDBRACKET", "RROUNDBRACKET", "LSQUAREBRACKET", "RSQUAREBRACKET", 
		"LCURLYBRACKET", "RCURLYBRACKET", "QUESTIONMARK", "COLON", "EXCLAMATION", 
		"SEMICOLON", "PLUS", "MINUS", "RSLASH", "STAR", "AND", "OR", "CARROT", 
		"PERCENT", "SHIFTLEFT", "SHIFTRIGHT", "ANDAND", "OROR", "EQUALEQUAL", 
		"EXCLAMATIONEQUAL", "LESSEQUAL", "GREATEREQUAL", "LESS", "GREATER", "EQUAL", 
		"NUMBER", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ParserRules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ParserRulesLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,42,241,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,
		1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,
		1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,
		1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
		1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,
		1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,
		1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,
		1,39,4,39,211,8,39,11,39,12,39,212,1,39,1,39,4,39,217,8,39,11,39,12,39,
		218,3,39,221,8,39,1,40,1,40,1,41,1,41,1,41,5,41,228,8,41,10,41,12,41,231,
		9,41,1,42,1,42,1,43,4,43,236,8,43,11,43,12,43,237,1,43,1,43,0,0,44,1,1,
		3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
		31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
		55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
		79,40,81,0,83,41,85,0,87,42,1,0,2,3,0,65,90,95,95,97,122,3,0,9,10,13,13,
		32,32,244,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
		0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
		0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
		1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
		0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
		1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
		0,0,77,1,0,0,0,0,79,1,0,0,0,0,83,1,0,0,0,0,87,1,0,0,0,1,89,1,0,0,0,3,93,
		1,0,0,0,5,99,1,0,0,0,7,102,1,0,0,0,9,107,1,0,0,0,11,113,1,0,0,0,13,122,
		1,0,0,0,15,126,1,0,0,0,17,132,1,0,0,0,19,137,1,0,0,0,21,143,1,0,0,0,23,
		145,1,0,0,0,25,147,1,0,0,0,27,149,1,0,0,0,29,151,1,0,0,0,31,153,1,0,0,
		0,33,155,1,0,0,0,35,157,1,0,0,0,37,159,1,0,0,0,39,161,1,0,0,0,41,163,1,
		0,0,0,43,165,1,0,0,0,45,167,1,0,0,0,47,169,1,0,0,0,49,171,1,0,0,0,51,173,
		1,0,0,0,53,175,1,0,0,0,55,177,1,0,0,0,57,179,1,0,0,0,59,182,1,0,0,0,61,
		185,1,0,0,0,63,188,1,0,0,0,65,191,1,0,0,0,67,194,1,0,0,0,69,197,1,0,0,
		0,71,200,1,0,0,0,73,203,1,0,0,0,75,205,1,0,0,0,77,207,1,0,0,0,79,210,1,
		0,0,0,81,222,1,0,0,0,83,224,1,0,0,0,85,232,1,0,0,0,87,235,1,0,0,0,89,90,
		5,102,0,0,90,91,5,111,0,0,91,92,5,114,0,0,92,2,1,0,0,0,93,94,5,119,0,0,
		94,95,5,104,0,0,95,96,5,105,0,0,96,97,5,108,0,0,97,98,5,101,0,0,98,4,1,
		0,0,0,99,100,5,105,0,0,100,101,5,102,0,0,101,6,1,0,0,0,102,103,5,101,0,
		0,103,104,5,108,0,0,104,105,5,115,0,0,105,106,5,101,0,0,106,8,1,0,0,0,
		107,108,5,98,0,0,108,109,5,114,0,0,109,110,5,101,0,0,110,111,5,97,0,0,
		111,112,5,107,0,0,112,10,1,0,0,0,113,114,5,99,0,0,114,115,5,111,0,0,115,
		116,5,110,0,0,116,117,5,116,0,0,117,118,5,105,0,0,118,119,5,110,0,0,119,
		120,5,117,0,0,120,121,5,101,0,0,121,12,1,0,0,0,122,123,5,105,0,0,123,124,
		5,110,0,0,124,125,5,116,0,0,125,14,1,0,0,0,126,127,5,102,0,0,127,128,5,
		108,0,0,128,129,5,111,0,0,129,130,5,97,0,0,130,131,5,116,0,0,131,16,1,
		0,0,0,132,133,5,116,0,0,133,134,5,114,0,0,134,135,5,117,0,0,135,136,5,
		101,0,0,136,18,1,0,0,0,137,138,5,102,0,0,138,139,5,97,0,0,139,140,5,108,
		0,0,140,141,5,115,0,0,141,142,5,101,0,0,142,20,1,0,0,0,143,144,5,40,0,
		0,144,22,1,0,0,0,145,146,5,41,0,0,146,24,1,0,0,0,147,148,5,91,0,0,148,
		26,1,0,0,0,149,150,5,93,0,0,150,28,1,0,0,0,151,152,5,123,0,0,152,30,1,
		0,0,0,153,154,5,125,0,0,154,32,1,0,0,0,155,156,5,63,0,0,156,34,1,0,0,0,
		157,158,5,58,0,0,158,36,1,0,0,0,159,160,5,33,0,0,160,38,1,0,0,0,161,162,
		5,59,0,0,162,40,1,0,0,0,163,164,5,43,0,0,164,42,1,0,0,0,165,166,5,45,0,
		0,166,44,1,0,0,0,167,168,5,47,0,0,168,46,1,0,0,0,169,170,5,42,0,0,170,
		48,1,0,0,0,171,172,5,38,0,0,172,50,1,0,0,0,173,174,5,124,0,0,174,52,1,
		0,0,0,175,176,5,94,0,0,176,54,1,0,0,0,177,178,5,37,0,0,178,56,1,0,0,0,
		179,180,5,60,0,0,180,181,5,60,0,0,181,58,1,0,0,0,182,183,5,62,0,0,183,
		184,5,62,0,0,184,60,1,0,0,0,185,186,5,38,0,0,186,187,5,38,0,0,187,62,1,
		0,0,0,188,189,5,124,0,0,189,190,5,124,0,0,190,64,1,0,0,0,191,192,5,61,
		0,0,192,193,5,61,0,0,193,66,1,0,0,0,194,195,5,33,0,0,195,196,5,61,0,0,
		196,68,1,0,0,0,197,198,5,60,0,0,198,199,5,61,0,0,199,70,1,0,0,0,200,201,
		5,62,0,0,201,202,5,61,0,0,202,72,1,0,0,0,203,204,5,60,0,0,204,74,1,0,0,
		0,205,206,5,62,0,0,206,76,1,0,0,0,207,208,5,61,0,0,208,78,1,0,0,0,209,
		211,3,81,40,0,210,209,1,0,0,0,211,212,1,0,0,0,212,210,1,0,0,0,212,213,
		1,0,0,0,213,220,1,0,0,0,214,216,5,46,0,0,215,217,3,81,40,0,216,215,1,0,
		0,0,217,218,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,221,1,0,0,0,220,
		214,1,0,0,0,220,221,1,0,0,0,221,80,1,0,0,0,222,223,2,48,57,0,223,82,1,
		0,0,0,224,229,3,85,42,0,225,228,3,81,40,0,226,228,3,85,42,0,227,225,1,
		0,0,0,227,226,1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,
		230,84,1,0,0,0,231,229,1,0,0,0,232,233,7,0,0,0,233,86,1,0,0,0,234,236,
		7,1,0,0,235,234,1,0,0,0,236,237,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,
		0,238,239,1,0,0,0,239,240,6,43,0,0,240,88,1,0,0,0,7,0,212,218,220,227,
		229,237,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
