//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Users//marci//Desktop//Structural Language//AntlrCSharp//ParserRules.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ParserRulesLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INT=1, FLOAT=2, TRUE=3, FALSE=4, LROUNDBRACKET=5, RROUNDBRACKET=6, LSQUAREBRACKET=7, 
		RSQUAREBRACKET=8, LCURLYBRACKET=9, RCURLYBRACKET=10, QUESTIONMARK=11, 
		COLON=12, EXCLAMATION=13, SEMICOLON=14, PLUS=15, MINUS=16, RSLASH=17, 
		STAR=18, AND=19, OR=20, CARROT=21, PERCENT=22, SHIFTLEFT=23, SHIFTRIGHT=24, 
		ANDAND=25, OROR=26, EQUALEQUAL=27, EXCLAMATIONEQUAL=28, LESSEQUAL=29, 
		GREATEREQUAL=30, LESS=31, GREATER=32, EQUAL=33, NUMBER=34, IDENTIFIER=35, 
		WS=36;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INT", "FLOAT", "TRUE", "FALSE", "LROUNDBRACKET", "RROUNDBRACKET", "LSQUAREBRACKET", 
		"RSQUAREBRACKET", "LCURLYBRACKET", "RCURLYBRACKET", "QUESTIONMARK", "COLON", 
		"EXCLAMATION", "SEMICOLON", "PLUS", "MINUS", "RSLASH", "STAR", "AND", 
		"OR", "CARROT", "PERCENT", "SHIFTLEFT", "SHIFTRIGHT", "ANDAND", "OROR", 
		"EQUALEQUAL", "EXCLAMATIONEQUAL", "LESSEQUAL", "GREATEREQUAL", "LESS", 
		"GREATER", "EQUAL", "NUMBER", "DIGIT", "IDENTIFIER", "ALPHA", "WS"
	};


	public ParserRulesLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ParserRulesLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'float'", "'true'", "'false'", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'?'", "':'", "'!'", "';'", "'+'", "'-'", "'/'", "'*'", 
		"'&'", "'|'", "'^'", "'%'", "'<<'", "'>>'", "'&&'", "'||'", "'=='", "'!='", 
		"'<='", "'>='", "'<'", "'>'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "FLOAT", "TRUE", "FALSE", "LROUNDBRACKET", "RROUNDBRACKET", 
		"LSQUAREBRACKET", "RSQUAREBRACKET", "LCURLYBRACKET", "RCURLYBRACKET", 
		"QUESTIONMARK", "COLON", "EXCLAMATION", "SEMICOLON", "PLUS", "MINUS", 
		"RSLASH", "STAR", "AND", "OR", "CARROT", "PERCENT", "SHIFTLEFT", "SHIFTRIGHT", 
		"ANDAND", "OROR", "EQUALEQUAL", "EXCLAMATIONEQUAL", "LESSEQUAL", "GREATEREQUAL", 
		"LESS", "GREATER", "EQUAL", "NUMBER", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ParserRules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ParserRulesLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,36,196,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,
		2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,
		1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,
		1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
		1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,
		1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,
		1,32,1,33,4,33,166,8,33,11,33,12,33,167,1,33,1,33,4,33,172,8,33,11,33,
		12,33,173,3,33,176,8,33,1,34,1,34,1,35,1,35,1,35,5,35,183,8,35,10,35,12,
		35,186,9,35,1,36,1,36,1,37,4,37,191,8,37,11,37,12,37,192,1,37,1,37,0,0,
		38,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
		26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,0,71,35,73,0,75,
		36,1,0,2,3,0,65,90,95,95,97,122,3,0,9,10,13,13,32,32,199,0,1,1,0,0,0,0,
		3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
		0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
		1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
		0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
		0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,71,
		1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,81,1,0,0,0,5,87,1,0,0,0,7,92,1,0,0,
		0,9,98,1,0,0,0,11,100,1,0,0,0,13,102,1,0,0,0,15,104,1,0,0,0,17,106,1,0,
		0,0,19,108,1,0,0,0,21,110,1,0,0,0,23,112,1,0,0,0,25,114,1,0,0,0,27,116,
		1,0,0,0,29,118,1,0,0,0,31,120,1,0,0,0,33,122,1,0,0,0,35,124,1,0,0,0,37,
		126,1,0,0,0,39,128,1,0,0,0,41,130,1,0,0,0,43,132,1,0,0,0,45,134,1,0,0,
		0,47,137,1,0,0,0,49,140,1,0,0,0,51,143,1,0,0,0,53,146,1,0,0,0,55,149,1,
		0,0,0,57,152,1,0,0,0,59,155,1,0,0,0,61,158,1,0,0,0,63,160,1,0,0,0,65,162,
		1,0,0,0,67,165,1,0,0,0,69,177,1,0,0,0,71,179,1,0,0,0,73,187,1,0,0,0,75,
		190,1,0,0,0,77,78,5,105,0,0,78,79,5,110,0,0,79,80,5,116,0,0,80,2,1,0,0,
		0,81,82,5,102,0,0,82,83,5,108,0,0,83,84,5,111,0,0,84,85,5,97,0,0,85,86,
		5,116,0,0,86,4,1,0,0,0,87,88,5,116,0,0,88,89,5,114,0,0,89,90,5,117,0,0,
		90,91,5,101,0,0,91,6,1,0,0,0,92,93,5,102,0,0,93,94,5,97,0,0,94,95,5,108,
		0,0,95,96,5,115,0,0,96,97,5,101,0,0,97,8,1,0,0,0,98,99,5,40,0,0,99,10,
		1,0,0,0,100,101,5,41,0,0,101,12,1,0,0,0,102,103,5,91,0,0,103,14,1,0,0,
		0,104,105,5,93,0,0,105,16,1,0,0,0,106,107,5,123,0,0,107,18,1,0,0,0,108,
		109,5,125,0,0,109,20,1,0,0,0,110,111,5,63,0,0,111,22,1,0,0,0,112,113,5,
		58,0,0,113,24,1,0,0,0,114,115,5,33,0,0,115,26,1,0,0,0,116,117,5,59,0,0,
		117,28,1,0,0,0,118,119,5,43,0,0,119,30,1,0,0,0,120,121,5,45,0,0,121,32,
		1,0,0,0,122,123,5,47,0,0,123,34,1,0,0,0,124,125,5,42,0,0,125,36,1,0,0,
		0,126,127,5,38,0,0,127,38,1,0,0,0,128,129,5,124,0,0,129,40,1,0,0,0,130,
		131,5,94,0,0,131,42,1,0,0,0,132,133,5,37,0,0,133,44,1,0,0,0,134,135,5,
		60,0,0,135,136,5,60,0,0,136,46,1,0,0,0,137,138,5,62,0,0,138,139,5,62,0,
		0,139,48,1,0,0,0,140,141,5,38,0,0,141,142,5,38,0,0,142,50,1,0,0,0,143,
		144,5,124,0,0,144,145,5,124,0,0,145,52,1,0,0,0,146,147,5,61,0,0,147,148,
		5,61,0,0,148,54,1,0,0,0,149,150,5,33,0,0,150,151,5,61,0,0,151,56,1,0,0,
		0,152,153,5,60,0,0,153,154,5,61,0,0,154,58,1,0,0,0,155,156,5,62,0,0,156,
		157,5,61,0,0,157,60,1,0,0,0,158,159,5,60,0,0,159,62,1,0,0,0,160,161,5,
		62,0,0,161,64,1,0,0,0,162,163,5,61,0,0,163,66,1,0,0,0,164,166,3,69,34,
		0,165,164,1,0,0,0,166,167,1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,
		175,1,0,0,0,169,171,5,46,0,0,170,172,3,69,34,0,171,170,1,0,0,0,172,173,
		1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,176,1,0,0,0,175,169,1,0,0,
		0,175,176,1,0,0,0,176,68,1,0,0,0,177,178,2,48,57,0,178,70,1,0,0,0,179,
		184,3,73,36,0,180,183,3,69,34,0,181,183,3,73,36,0,182,180,1,0,0,0,182,
		181,1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,72,1,0,
		0,0,186,184,1,0,0,0,187,188,7,0,0,0,188,74,1,0,0,0,189,191,7,1,0,0,190,
		189,1,0,0,0,191,192,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,194,1,
		0,0,0,194,195,6,37,0,0,195,76,1,0,0,0,7,0,167,173,175,182,184,192,1,6,
		0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
