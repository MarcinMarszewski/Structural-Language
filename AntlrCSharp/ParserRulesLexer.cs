//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Users//marci//Desktop//Structural Language//AntlrCSharp//ParserRules.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ParserRulesLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TRUE=1, FALSE=2, QUESTIONMARK=3, COLON=4, EXCLAMATION=5, PLUS=6, MINUS=7, 
		RSLASH=8, STAR=9, AND=10, OR=11, CARROT=12, PERCENT=13, SHIFTLEFT=14, 
		SHIFTRIGHT=15, ANDAND=16, OROR=17, EQUALEQUAL=18, EXCLAMATIONEQUAL=19, 
		LESSEQUAL=20, GREATEREQUAL=21, LESS=22, GREATER=23, NUMBER=24, IDENTIFIER=25, 
		WS=26;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"TRUE", "FALSE", "QUESTIONMARK", "COLON", "EXCLAMATION", "PLUS", "MINUS", 
		"RSLASH", "STAR", "AND", "OR", "CARROT", "PERCENT", "SHIFTLEFT", "SHIFTRIGHT", 
		"ANDAND", "OROR", "EQUALEQUAL", "EXCLAMATIONEQUAL", "LESSEQUAL", "GREATEREQUAL", 
		"LESS", "GREATER", "NUMBER", "DIGIT", "IDENTIFIER", "ALPHA", "WS"
	};


	public ParserRulesLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ParserRulesLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'true'", "'false'", "'?'", "':'", "'!'", "'+'", "'-'", "'/'", "'*'", 
		"'&'", "'|'", "'^'", "'%'", "'<<'", "'>>'", "'&&'", "'||'", "'=='", "'!='", 
		"'<='", "'>='", "'<'", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TRUE", "FALSE", "QUESTIONMARK", "COLON", "EXCLAMATION", "PLUS", 
		"MINUS", "RSLASH", "STAR", "AND", "OR", "CARROT", "PERCENT", "SHIFTLEFT", 
		"SHIFTRIGHT", "ANDAND", "OROR", "EQUALEQUAL", "EXCLAMATIONEQUAL", "LESSEQUAL", 
		"GREATEREQUAL", "LESS", "GREATER", "NUMBER", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ParserRules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ParserRulesLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,26,150,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,
		0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,
		1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
		1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,
		1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,4,23,
		120,8,23,11,23,12,23,121,1,23,1,23,4,23,126,8,23,11,23,12,23,127,3,23,
		130,8,23,1,24,1,24,1,25,1,25,1,25,5,25,137,8,25,10,25,12,25,140,9,25,1,
		26,1,26,1,27,4,27,145,8,27,11,27,12,27,146,1,27,1,27,0,0,28,1,1,3,2,5,
		3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
		33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,0,51,25,53,0,55,26,
		1,0,2,3,0,65,90,95,95,97,122,3,0,9,10,13,13,32,32,153,0,1,1,0,0,0,0,3,
		1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
		0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
		1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
		0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,51,1,0,0,0,0,55,1,0,0,0,1,57,1,0,0,0,3,62,1,0,0,0,5,68,1,0,0,
		0,7,70,1,0,0,0,9,72,1,0,0,0,11,74,1,0,0,0,13,76,1,0,0,0,15,78,1,0,0,0,
		17,80,1,0,0,0,19,82,1,0,0,0,21,84,1,0,0,0,23,86,1,0,0,0,25,88,1,0,0,0,
		27,90,1,0,0,0,29,93,1,0,0,0,31,96,1,0,0,0,33,99,1,0,0,0,35,102,1,0,0,0,
		37,105,1,0,0,0,39,108,1,0,0,0,41,111,1,0,0,0,43,114,1,0,0,0,45,116,1,0,
		0,0,47,119,1,0,0,0,49,131,1,0,0,0,51,133,1,0,0,0,53,141,1,0,0,0,55,144,
		1,0,0,0,57,58,5,116,0,0,58,59,5,114,0,0,59,60,5,117,0,0,60,61,5,101,0,
		0,61,2,1,0,0,0,62,63,5,102,0,0,63,64,5,97,0,0,64,65,5,108,0,0,65,66,5,
		115,0,0,66,67,5,101,0,0,67,4,1,0,0,0,68,69,5,63,0,0,69,6,1,0,0,0,70,71,
		5,58,0,0,71,8,1,0,0,0,72,73,5,33,0,0,73,10,1,0,0,0,74,75,5,43,0,0,75,12,
		1,0,0,0,76,77,5,45,0,0,77,14,1,0,0,0,78,79,5,47,0,0,79,16,1,0,0,0,80,81,
		5,42,0,0,81,18,1,0,0,0,82,83,5,38,0,0,83,20,1,0,0,0,84,85,5,124,0,0,85,
		22,1,0,0,0,86,87,5,94,0,0,87,24,1,0,0,0,88,89,5,37,0,0,89,26,1,0,0,0,90,
		91,5,60,0,0,91,92,5,60,0,0,92,28,1,0,0,0,93,94,5,62,0,0,94,95,5,62,0,0,
		95,30,1,0,0,0,96,97,5,38,0,0,97,98,5,38,0,0,98,32,1,0,0,0,99,100,5,124,
		0,0,100,101,5,124,0,0,101,34,1,0,0,0,102,103,5,61,0,0,103,104,5,61,0,0,
		104,36,1,0,0,0,105,106,5,33,0,0,106,107,5,61,0,0,107,38,1,0,0,0,108,109,
		5,60,0,0,109,110,5,61,0,0,110,40,1,0,0,0,111,112,5,62,0,0,112,113,5,61,
		0,0,113,42,1,0,0,0,114,115,5,60,0,0,115,44,1,0,0,0,116,117,5,62,0,0,117,
		46,1,0,0,0,118,120,3,49,24,0,119,118,1,0,0,0,120,121,1,0,0,0,121,119,1,
		0,0,0,121,122,1,0,0,0,122,129,1,0,0,0,123,125,5,46,0,0,124,126,3,49,24,
		0,125,124,1,0,0,0,126,127,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,
		130,1,0,0,0,129,123,1,0,0,0,129,130,1,0,0,0,130,48,1,0,0,0,131,132,2,48,
		57,0,132,50,1,0,0,0,133,138,3,53,26,0,134,137,3,49,24,0,135,137,3,53,26,
		0,136,134,1,0,0,0,136,135,1,0,0,0,137,140,1,0,0,0,138,136,1,0,0,0,138,
		139,1,0,0,0,139,52,1,0,0,0,140,138,1,0,0,0,141,142,7,0,0,0,142,54,1,0,
		0,0,143,145,7,1,0,0,144,143,1,0,0,0,145,146,1,0,0,0,146,144,1,0,0,0,146,
		147,1,0,0,0,147,148,1,0,0,0,148,149,6,27,0,0,149,56,1,0,0,0,7,0,121,127,
		129,136,138,146,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
