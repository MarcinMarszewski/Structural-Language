//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Users//marci//Desktop//Structural Language//AntlrCSharp//ParserRules.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ParserRulesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INT=1, FLOAT=2, TRUE=3, FALSE=4, LROUNDBRACKET=5, RROUNDBRACKET=6, LSQUAREBRACKET=7, 
		RSQUAREBRACKET=8, LCURLYBRACKET=9, RCURLYBRACKET=10, QUESTIONMARK=11, 
		COLON=12, EXCLAMATION=13, SEMICOLON=14, PLUS=15, MINUS=16, RSLASH=17, 
		STAR=18, AND=19, OR=20, CARROT=21, PERCENT=22, SHIFTLEFT=23, SHIFTRIGHT=24, 
		ANDAND=25, OROR=26, EQUALEQUAL=27, EXCLAMATIONEQUAL=28, LESSEQUAL=29, 
		GREATEREQUAL=30, LESS=31, GREATER=32, EQUAL=33, NUMBER=34, IDENTIFIER=35, 
		WS=36;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_variableDeclaration = 2, RULE_type = 3, 
		RULE_expressionStatement = 4, RULE_expression = 5, RULE_ternary = 6, RULE_binary = 7, 
		RULE_primary = 8, RULE_variableAssignment = 9, RULE_variableAccess = 10, 
		RULE_grouping = 11, RULE_value = 12, RULE_unary = 13, RULE_binaryOp = 14, 
		RULE_number = 15, RULE_true = 16, RULE_false = 17;
	public static readonly string[] ruleNames = {
		"program", "statement", "variableDeclaration", "type", "expressionStatement", 
		"expression", "ternary", "binary", "primary", "variableAssignment", "variableAccess", 
		"grouping", "value", "unary", "binaryOp", "number", "true", "false"
	};

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'float'", "'true'", "'false'", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'?'", "':'", "'!'", "';'", "'+'", "'-'", "'/'", "'*'", 
		"'&'", "'|'", "'^'", "'%'", "'<<'", "'>>'", "'&&'", "'||'", "'=='", "'!='", 
		"'<='", "'>='", "'<'", "'>'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "FLOAT", "TRUE", "FALSE", "LROUNDBRACKET", "RROUNDBRACKET", 
		"LSQUAREBRACKET", "RSQUAREBRACKET", "LCURLYBRACKET", "RCURLYBRACKET", 
		"QUESTIONMARK", "COLON", "EXCLAMATION", "SEMICOLON", "PLUS", "MINUS", 
		"RSLASH", "STAR", "AND", "OR", "CARROT", "PERCENT", "SHIFTLEFT", "SHIFTRIGHT", 
		"ANDAND", "OROR", "EQUALEQUAL", "EXCLAMATIONEQUAL", "LESSEQUAL", "GREATEREQUAL", 
		"LESS", "GREATER", "EQUAL", "NUMBER", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ParserRules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ParserRulesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ParserRulesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ParserRulesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 36;
				statement();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 51539681342L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 43;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 41;
				expressionStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 42;
				variableDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ParserRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ParserRulesParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			type();
			State = 46;
			Match(IDENTIFIER);
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 47;
				Match(EQUAL);
				State = 48;
				expression();
				}
			}

			State = 51;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ParserRulesParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ParserRulesParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LSQUAREBRACKET() { return GetTokens(ParserRulesParser.LSQUAREBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUAREBRACKET(int i) {
			return GetToken(ParserRulesParser.LSQUAREBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RSQUAREBRACKET() { return GetTokens(ParserRulesParser.RSQUAREBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUAREBRACKET(int i) {
			return GetToken(ParserRulesParser.RSQUAREBRACKET, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 34359738374L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LSQUAREBRACKET) {
				{
				{
				State = 54;
				Match(LSQUAREBRACKET);
				State = 55;
				Match(RSQUAREBRACKET);
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ParserRulesParser.SEMICOLON, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			expression();
			State = 62;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TernaryContext ternary() {
			return GetRuleContext<TernaryContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			ternary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TernaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryContext binary() {
			return GetRuleContext<BinaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTIONMARK() { return GetToken(ParserRulesParser.QUESTIONMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ParserRulesParser.COLON, 0); }
		public TernaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TernaryContext ternary() {
		TernaryContext _localctx = new TernaryContext(Context, State);
		EnterRule(_localctx, 12, RULE_ternary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			binary();
			State = 72;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 67;
				Match(QUESTIONMARK);
				State = 68;
				expression();
				State = 69;
				Match(COLON);
				State = 70;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryContext binary() {
			return GetRuleContext<BinaryContext>(0);
		}
		public BinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryContext binary() {
		BinaryContext _localctx = new BinaryContext(Context, State);
		EnterRule(_localctx, 14, RULE_binary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			primary();
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 75;
				binaryOp();
				State = 76;
				binary();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupingContext grouping() {
			return GetRuleContext<GroupingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAccessContext variableAccess() {
			return GetRuleContext<VariableAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 16, RULE_primary);
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80;
				value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 81;
				unary();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 82;
				grouping();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 83;
				variableAccess();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 84;
				variableAssignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ParserRulesParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(IDENTIFIER);
			State = 88;
			Match(EQUAL);
			State = 89;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserRulesParser.IDENTIFIER, 0); }
		public VariableAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterVariableAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitVariableAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAccessContext variableAccess() {
		VariableAccessContext _localctx = new VariableAccessContext(Context, State);
		EnterRule(_localctx, 20, RULE_variableAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LROUNDBRACKET() { return GetToken(ParserRulesParser.LROUNDBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RROUNDBRACKET() { return GetToken(ParserRulesParser.RROUNDBRACKET, 0); }
		public GroupingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterGrouping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitGrouping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingContext grouping() {
		GroupingContext _localctx = new GroupingContext(Context, State);
		EnterRule(_localctx, 22, RULE_grouping);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(LROUNDBRACKET);
			State = 94;
			expression();
			State = 95;
			Match(RROUNDBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrueContext @true() {
			return GetRuleContext<TrueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FalseContext @false() {
			return GetRuleContext<FalseContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 24, RULE_value);
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				number();
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98;
				@true();
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 99;
				@false();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ParserRulesParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION() { return GetToken(ParserRulesParser.EXCLAMATION, 0); }
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 26, RULE_unary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			_la = TokenStream.LA(1);
			if ( !(_la==EXCLAMATION || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 103;
			primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ParserRulesParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ParserRulesParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(ParserRulesParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANDAND() { return GetToken(ParserRulesParser.ANDAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARROT() { return GetToken(ParserRulesParser.CARROT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALEQUAL() { return GetToken(ParserRulesParser.EQUALEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATIONEQUAL() { return GetToken(ParserRulesParser.EXCLAMATIONEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(ParserRulesParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL() { return GetToken(ParserRulesParser.GREATEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(ParserRulesParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUAL() { return GetToken(ParserRulesParser.LESSEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ParserRulesParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OROR() { return GetToken(ParserRulesParser.OROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(ParserRulesParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSLASH() { return GetToken(ParserRulesParser.RSLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHIFTLEFT() { return GetToken(ParserRulesParser.SHIFTLEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHIFTRIGHT() { return GetToken(ParserRulesParser.SHIFTRIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(ParserRulesParser.STAR, 0); }
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 28, RULE_binaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8589901824L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ParserRulesParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 30, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(ParserRulesParser.TRUE, 0); }
		public TrueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_true; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrueContext @true() {
		TrueContext _localctx = new TrueContext(Context, State);
		EnterRule(_localctx, 32, RULE_true);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(TRUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FalseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(ParserRulesParser.FALSE, 0); }
		public FalseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_false; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FalseContext @false() {
		FalseContext _localctx = new FalseContext(Context, State);
		EnterRule(_localctx, 34, RULE_false);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(FALSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,36,114,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,1,0,4,0,38,8,0,11,0,12,0,39,1,1,1,1,3,1,
		44,8,1,1,2,1,2,1,2,1,2,3,2,50,8,2,1,2,1,2,1,3,1,3,1,3,5,3,57,8,3,10,3,
		12,3,60,9,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,3,6,73,8,6,1,7,
		1,7,1,7,1,7,3,7,79,8,7,1,8,1,8,1,8,1,8,1,8,3,8,86,8,8,1,9,1,9,1,9,1,9,
		1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,3,12,101,8,12,1,13,1,13,1,
		13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,0,0,18,0,2,4,6,8,10,12,
		14,16,18,20,22,24,26,28,30,32,34,0,3,2,0,1,2,35,35,2,0,13,13,16,16,1,0,
		15,32,107,0,37,1,0,0,0,2,43,1,0,0,0,4,45,1,0,0,0,6,53,1,0,0,0,8,61,1,0,
		0,0,10,64,1,0,0,0,12,66,1,0,0,0,14,74,1,0,0,0,16,85,1,0,0,0,18,87,1,0,
		0,0,20,91,1,0,0,0,22,93,1,0,0,0,24,100,1,0,0,0,26,102,1,0,0,0,28,105,1,
		0,0,0,30,107,1,0,0,0,32,109,1,0,0,0,34,111,1,0,0,0,36,38,3,2,1,0,37,36,
		1,0,0,0,38,39,1,0,0,0,39,37,1,0,0,0,39,40,1,0,0,0,40,1,1,0,0,0,41,44,3,
		8,4,0,42,44,3,4,2,0,43,41,1,0,0,0,43,42,1,0,0,0,44,3,1,0,0,0,45,46,3,6,
		3,0,46,49,5,35,0,0,47,48,5,33,0,0,48,50,3,10,5,0,49,47,1,0,0,0,49,50,1,
		0,0,0,50,51,1,0,0,0,51,52,5,14,0,0,52,5,1,0,0,0,53,58,7,0,0,0,54,55,5,
		7,0,0,55,57,5,8,0,0,56,54,1,0,0,0,57,60,1,0,0,0,58,56,1,0,0,0,58,59,1,
		0,0,0,59,7,1,0,0,0,60,58,1,0,0,0,61,62,3,10,5,0,62,63,5,14,0,0,63,9,1,
		0,0,0,64,65,3,12,6,0,65,11,1,0,0,0,66,72,3,14,7,0,67,68,5,11,0,0,68,69,
		3,10,5,0,69,70,5,12,0,0,70,71,3,10,5,0,71,73,1,0,0,0,72,67,1,0,0,0,72,
		73,1,0,0,0,73,13,1,0,0,0,74,78,3,16,8,0,75,76,3,28,14,0,76,77,3,14,7,0,
		77,79,1,0,0,0,78,75,1,0,0,0,78,79,1,0,0,0,79,15,1,0,0,0,80,86,3,24,12,
		0,81,86,3,26,13,0,82,86,3,22,11,0,83,86,3,20,10,0,84,86,3,18,9,0,85,80,
		1,0,0,0,85,81,1,0,0,0,85,82,1,0,0,0,85,83,1,0,0,0,85,84,1,0,0,0,86,17,
		1,0,0,0,87,88,5,35,0,0,88,89,5,33,0,0,89,90,3,10,5,0,90,19,1,0,0,0,91,
		92,5,35,0,0,92,21,1,0,0,0,93,94,5,5,0,0,94,95,3,10,5,0,95,96,5,6,0,0,96,
		23,1,0,0,0,97,101,3,30,15,0,98,101,3,32,16,0,99,101,3,34,17,0,100,97,1,
		0,0,0,100,98,1,0,0,0,100,99,1,0,0,0,101,25,1,0,0,0,102,103,7,1,0,0,103,
		104,3,16,8,0,104,27,1,0,0,0,105,106,7,2,0,0,106,29,1,0,0,0,107,108,5,34,
		0,0,108,31,1,0,0,0,109,110,5,3,0,0,110,33,1,0,0,0,111,112,5,4,0,0,112,
		35,1,0,0,0,8,39,43,49,58,72,78,85,100
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
