//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Users//marci//Desktop//Structural Language//AntlrCSharp//ParserRules.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ParserRulesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TRUE=1, FALSE=2, QUESTIONMARK=3, COLON=4, EXCLAMATION=5, PLUS=6, MINUS=7, 
		RSLASH=8, STAR=9, AND=10, OR=11, CARROT=12, PERCENT=13, SHIFTLEFT=14, 
		SHIFTRIGHT=15, ANDAND=16, OROR=17, EQUALEQUAL=18, EXCLAMATIONEQUAL=19, 
		LESSEQUAL=20, GREATEREQUAL=21, LESS=22, GREATER=23, NUMBER=24, IDENTIFIER=25, 
		WS=26;
	public const int
		RULE_expression = 0, RULE_ternary = 1, RULE_binary = 2, RULE_primary = 3, 
		RULE_value = 4, RULE_binaryOp = 5, RULE_number = 6, RULE_true = 7, RULE_false = 8;
	public static readonly string[] ruleNames = {
		"expression", "ternary", "binary", "primary", "value", "binaryOp", "number", 
		"true", "false"
	};

	private static readonly string[] _LiteralNames = {
		null, "'true'", "'false'", "'?'", "':'", "'!'", "'+'", "'-'", "'/'", "'*'", 
		"'&'", "'|'", "'^'", "'%'", "'<<'", "'>>'", "'&&'", "'||'", "'=='", "'!='", 
		"'<='", "'>='", "'<'", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TRUE", "FALSE", "QUESTIONMARK", "COLON", "EXCLAMATION", "PLUS", 
		"MINUS", "RSLASH", "STAR", "AND", "OR", "CARROT", "PERCENT", "SHIFTLEFT", 
		"SHIFTRIGHT", "ANDAND", "OROR", "EQUALEQUAL", "EXCLAMATIONEQUAL", "LESSEQUAL", 
		"GREATEREQUAL", "LESS", "GREATER", "NUMBER", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ParserRules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ParserRulesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ParserRulesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ParserRulesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TernaryContext ternary() {
			return GetRuleContext<TernaryContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			ternary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TernaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryContext binary() {
			return GetRuleContext<BinaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTIONMARK() { return GetToken(ParserRulesParser.QUESTIONMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ParserRulesParser.COLON, 0); }
		public TernaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TernaryContext ternary() {
		TernaryContext _localctx = new TernaryContext(Context, State);
		EnterRule(_localctx, 2, RULE_ternary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			binary();
			State = 26;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTIONMARK) {
				{
				State = 21;
				Match(QUESTIONMARK);
				State = 22;
				expression();
				State = 23;
				Match(COLON);
				State = 24;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryContext binary() {
			return GetRuleContext<BinaryContext>(0);
		}
		public BinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryContext binary() {
		BinaryContext _localctx = new BinaryContext(Context, State);
		EnterRule(_localctx, 4, RULE_binary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			primary();
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16777152L) != 0)) {
				{
				State = 29;
				binaryOp();
				State = 30;
				binary();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 6, RULE_primary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrueContext @true() {
			return GetRuleContext<TrueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FalseContext @false() {
			return GetRuleContext<FalseContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 8, RULE_value);
		try {
			State = 39;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36;
				number();
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37;
				@true();
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 38;
				@false();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ParserRulesParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ParserRulesParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(ParserRulesParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANDAND() { return GetToken(ParserRulesParser.ANDAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARROT() { return GetToken(ParserRulesParser.CARROT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALEQUAL() { return GetToken(ParserRulesParser.EQUALEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATIONEQUAL() { return GetToken(ParserRulesParser.EXCLAMATIONEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(ParserRulesParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL() { return GetToken(ParserRulesParser.GREATEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(ParserRulesParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUAL() { return GetToken(ParserRulesParser.LESSEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ParserRulesParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OROR() { return GetToken(ParserRulesParser.OROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(ParserRulesParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSLASH() { return GetToken(ParserRulesParser.RSLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHIFTLEFT() { return GetToken(ParserRulesParser.SHIFTLEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHIFTRIGHT() { return GetToken(ParserRulesParser.SHIFTRIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(ParserRulesParser.STAR, 0); }
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 10, RULE_binaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16777152L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ParserRulesParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 12, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(ParserRulesParser.TRUE, 0); }
		public TrueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_true; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrueContext @true() {
		TrueContext _localctx = new TrueContext(Context, State);
		EnterRule(_localctx, 14, RULE_true);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			Match(TRUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FalseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(ParserRulesParser.FALSE, 0); }
		public FalseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_false; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserRulesVisitor<TResult> typedVisitor = visitor as IParserRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FalseContext @false() {
		FalseContext _localctx = new FalseContext(Context, State);
		EnterRule(_localctx, 16, RULE_false);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			Match(FALSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,26,50,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,27,8,1,1,2,1,2,1,2,1,2,
		3,2,33,8,2,1,3,1,3,1,4,1,4,1,4,3,4,40,8,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,
		1,8,1,8,0,0,9,0,2,4,6,8,10,12,14,16,0,1,1,0,6,23,44,0,18,1,0,0,0,2,20,
		1,0,0,0,4,28,1,0,0,0,6,34,1,0,0,0,8,39,1,0,0,0,10,41,1,0,0,0,12,43,1,0,
		0,0,14,45,1,0,0,0,16,47,1,0,0,0,18,19,3,2,1,0,19,1,1,0,0,0,20,26,3,4,2,
		0,21,22,5,3,0,0,22,23,3,0,0,0,23,24,5,4,0,0,24,25,3,0,0,0,25,27,1,0,0,
		0,26,21,1,0,0,0,26,27,1,0,0,0,27,3,1,0,0,0,28,32,3,6,3,0,29,30,3,10,5,
		0,30,31,3,4,2,0,31,33,1,0,0,0,32,29,1,0,0,0,32,33,1,0,0,0,33,5,1,0,0,0,
		34,35,3,8,4,0,35,7,1,0,0,0,36,40,3,12,6,0,37,40,3,14,7,0,38,40,3,16,8,
		0,39,36,1,0,0,0,39,37,1,0,0,0,39,38,1,0,0,0,40,9,1,0,0,0,41,42,7,0,0,0,
		42,11,1,0,0,0,43,44,5,24,0,0,44,13,1,0,0,0,45,46,5,1,0,0,46,15,1,0,0,0,
		47,48,5,2,0,0,48,17,1,0,0,0,3,26,32,39
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
