//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Users//marci//Desktop//Structural Language//AntlrCSharp//ParserRules.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ParserRulesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MINUS=1, PLUS=2, STAR=3, RSLASH=4, EXCLAMATION=5, AND=6, OR=7, CARROT=8, 
		SHIFTLEFT=9, SHIFTRIGHT=10, ANDAND=11, OROR=12, EQUALEQUAL=13, EXCLAMATIONEQUAL=14, 
		LESSEQUAL=15, GREATEREQUAL=16, LESS=17, GREATER=18, INT=19, FLOAT=20, 
		SHORT=21, CHAR=22, LONG=23, DECIMAL=24, UNARYOP=25, BINARYMATH=26, BINARYBITWISE=27, 
		BINARYLOGIC=28, TYPE=29, TRUE=30, FALSE=31, FOR=32, LCURLYBRACKET=33, 
		RCURLYBRACKET=34, LSQUAREBRACKET=35, RSQUAREBRACKET=36, SEMICOLON=37, 
		ENUM=38, STRUCT=39, EQUAL=40, COMMA=41, DOT=42, LPARENTHESIS=43, RPARENTHESIS=44, 
		WHILE=45, DO=46, SWITCH=47, DEFAULT=48, CASE=49, CONTINUE=50, BREAK=51, 
		COLON=52, QUESTIONMARK=53, RETURN=54, DIGIT=55, NUMBER=56, ALPHA=57, IDENTIFIER=58, 
		WS=59;
	public const int
		RULE_program = 0, RULE_definition = 1, RULE_structDefinition = 2, RULE_enumerableDefinition = 3, 
		RULE_function = 4, RULE_variableDeclaration = 5, RULE_arrayDeclaration = 6, 
		RULE_arrayAssignment = 7, RULE_statement = 8, RULE_block = 9, RULE_expressionStatement = 10, 
		RULE_whileStatement = 11, RULE_forStatement = 12, RULE_doWhileStatement = 13, 
		RULE_switchStatement = 14, RULE_case = 15, RULE_returnStatement = 16, 
		RULE_breakStatement = 17, RULE_continueStatement = 18, RULE_expression = 19, 
		RULE_ternary = 20, RULE_binary = 21, RULE_primary = 22, RULE_unary = 23, 
		RULE_grouping = 24, RULE_arrayAccess = 25, RULE_call = 26, RULE_typeCast = 27, 
		RULE_assignment = 28, RULE_fieldAccess = 29;
	public static readonly string[] ruleNames = {
		"program", "definition", "structDefinition", "enumerableDefinition", "function", 
		"variableDeclaration", "arrayDeclaration", "arrayAssignment", "statement", 
		"block", "expressionStatement", "whileStatement", "forStatement", "doWhileStatement", 
		"switchStatement", "case", "returnStatement", "breakStatement", "continueStatement", 
		"expression", "ternary", "binary", "primary", "unary", "grouping", "arrayAccess", 
		"call", "typeCast", "assignment", "fieldAccess"
	};

	private static readonly string[] _LiteralNames = {
		null, "'-'", "'+'", "'*'", "'/'", "'!'", "'&'", "'|'", "'^'", "'<<'", 
		"'>>'", "'&&'", "'||'", "'=='", "'!='", "'<='", "'>='", "'<'", "'>'", 
		"'int'", "'float'", "'short'", "'char'", "'long'", "'decimal'", null, 
		null, null, null, null, "'true'", "'false'", "'for'", "'{'", "'}'", "'['", 
		"']'", "';'", "'enum'", "'struct'", "'='", "','", "'.'", "'('", "')'", 
		"'while'", "'do'", "'switch'", "'default'", "'case'", "'continue'", "'break'", 
		"':'", "'?'", "'return'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MINUS", "PLUS", "STAR", "RSLASH", "EXCLAMATION", "AND", "OR", "CARROT", 
		"SHIFTLEFT", "SHIFTRIGHT", "ANDAND", "OROR", "EQUALEQUAL", "EXCLAMATIONEQUAL", 
		"LESSEQUAL", "GREATEREQUAL", "LESS", "GREATER", "INT", "FLOAT", "SHORT", 
		"CHAR", "LONG", "DECIMAL", "UNARYOP", "BINARYMATH", "BINARYBITWISE", "BINARYLOGIC", 
		"TYPE", "TRUE", "FALSE", "FOR", "LCURLYBRACKET", "RCURLYBRACKET", "LSQUAREBRACKET", 
		"RSQUAREBRACKET", "SEMICOLON", "ENUM", "STRUCT", "EQUAL", "COMMA", "DOT", 
		"LPARENTHESIS", "RPARENTHESIS", "WHILE", "DO", "SWITCH", "DEFAULT", "CASE", 
		"CONTINUE", "BREAK", "COLON", "QUESTIONMARK", "RETURN", "DIGIT", "NUMBER", 
		"ALPHA", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ParserRules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ParserRulesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ParserRulesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ParserRulesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 825170591744L) != 0)) {
				{
				{
				State = 60;
				definition();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerableDefinitionContext enumerableDefinition() {
			return GetRuleContext<EnumerableDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_definition);
		try {
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66;
				structDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67;
				enumerableDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 68;
				variableDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 69;
				function();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 70;
				arrayDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(ParserRulesParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ParserRulesParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ParserRulesParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACKET() { return GetToken(ParserRulesParser.LCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACKET() { return GetToken(ParserRulesParser.RCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TYPE() { return GetTokens(ParserRulesParser.TYPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE(int i) {
			return GetToken(ParserRulesParser.TYPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(ParserRulesParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(ParserRulesParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LSQUAREBRACKET() { return GetTokens(ParserRulesParser.LSQUAREBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUAREBRACKET(int i) {
			return GetToken(ParserRulesParser.LSQUAREBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RSQUAREBRACKET() { return GetTokens(ParserRulesParser.RSQUAREBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUAREBRACKET(int i) {
			return GetToken(ParserRulesParser.RSQUAREBRACKET, i);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(STRUCT);
			State = 74;
			Match(IDENTIFIER);
			State = 75;
			Match(LCURLYBRACKET);
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 76;
				Match(TYPE);
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LSQUAREBRACKET) {
					{
					State = 77;
					Match(LSQUAREBRACKET);
					State = 78;
					Match(RSQUAREBRACKET);
					}
				}

				State = 81;
				Match(IDENTIFIER);
				State = 82;
				Match(SEMICOLON);
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TYPE );
			State = 87;
			Match(RCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerableDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(ParserRulesParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ParserRulesParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ParserRulesParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACKET() { return GetToken(ParserRulesParser.LCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACKET() { return GetToken(ParserRulesParser.RCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(ParserRulesParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(ParserRulesParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(ParserRulesParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(ParserRulesParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserRulesParser.COMMA, i);
		}
		public EnumerableDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerableDefinition; } }
	}

	[RuleVersion(0)]
	public EnumerableDefinitionContext enumerableDefinition() {
		EnumerableDefinitionContext _localctx = new EnumerableDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_enumerableDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(ENUM);
			State = 90;
			Match(IDENTIFIER);
			State = 91;
			Match(LCURLYBRACKET);
			State = 92;
			Match(IDENTIFIER);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 93;
				Match(EQUAL);
				State = 94;
				Match(NUMBER);
				}
			}

			State = 105;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 97;
					Match(COMMA);
					State = 98;
					Match(IDENTIFIER);
					State = 101;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==EQUAL) {
						{
						State = 99;
						Match(EQUAL);
						State = 100;
						Match(NUMBER);
						}
					}

					}
					} 
				}
				State = 107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 108;
				Match(COMMA);
				}
			}

			State = 111;
			Match(RCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TYPE() { return GetTokens(ParserRulesParser.TYPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE(int i) {
			return GetToken(ParserRulesParser.TYPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ParserRulesParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ParserRulesParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(ParserRulesParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(ParserRulesParser.RPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACKET() { return GetToken(ParserRulesParser.LCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACKET() { return GetToken(ParserRulesParser.RCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserRulesParser.COMMA, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 8, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(TYPE);
			State = 114;
			Match(IDENTIFIER);
			State = 115;
			Match(LPARENTHESIS);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TYPE) {
				{
				State = 116;
				Match(TYPE);
				State = 117;
				Match(IDENTIFIER);
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 118;
					Match(COMMA);
					State = 119;
					Match(TYPE);
					State = 120;
					Match(IDENTIFIER);
					}
					}
					State = 125;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 128;
			Match(RPARENTHESIS);
			State = 129;
			Match(LCURLYBRACKET);
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 381935171810623488L) != 0)) {
				{
				{
				State = 130;
				statement();
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 136;
			Match(RCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(ParserRulesParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ParserRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ParserRulesParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ParserRulesParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserRulesParser.COMMA, i);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(TYPE);
			State = 141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 139;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				{
				State = 140;
				assignment();
				}
				break;
			}
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 143;
				Match(COMMA);
				State = 146;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 144;
					Match(IDENTIFIER);
					}
					break;
				case 2:
					{
					State = 145;
					assignment();
					}
					break;
				}
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 153;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(ParserRulesParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUAREBRACKET() { return GetToken(ParserRulesParser.LSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUAREBRACKET() { return GetToken(ParserRulesParser.RSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ParserRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ParserRulesParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ParserRulesParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignmentContext[] arrayAssignment() {
			return GetRuleContexts<ArrayAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignmentContext arrayAssignment(int i) {
			return GetRuleContext<ArrayAssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserRulesParser.COMMA, i);
		}
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_arrayDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(TYPE);
			State = 156;
			Match(LSQUAREBRACKET);
			State = 157;
			Match(RSQUAREBRACKET);
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 158;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				{
				State = 159;
				arrayAssignment();
				}
				break;
			}
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 162;
				Match(COMMA);
				State = 165;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 163;
					Match(IDENTIFIER);
					}
					break;
				case 2:
					{
					State = 164;
					arrayAssignment();
					}
					break;
				}
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 172;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ParserRulesParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUAREBRACKET() { return GetToken(ParserRulesParser.LSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUAREBRACKET() { return GetToken(ParserRulesParser.RSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACKET() { return GetToken(ParserRulesParser.LCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACKET() { return GetToken(ParserRulesParser.RCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserRulesParser.COMMA, i);
		}
		public ArrayAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAssignment; } }
	}

	[RuleVersion(0)]
	public ArrayAssignmentContext arrayAssignment() {
		ArrayAssignmentContext _localctx = new ArrayAssignmentContext(Context, State);
		EnterRule(_localctx, 14, RULE_arrayAssignment);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(IDENTIFIER);
			State = 175;
			Match(EQUAL);
			State = 194;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LSQUAREBRACKET:
				{
				{
				State = 176;
				Match(LSQUAREBRACKET);
				State = 177;
				expression();
				State = 178;
				Match(RSQUAREBRACKET);
				}
				}
				break;
			case LCURLYBRACKET:
				{
				{
				State = 180;
				Match(LCURLYBRACKET);
				State = 181;
				expression();
				State = 186;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 182;
						Match(COMMA);
						State = 183;
						expression();
						}
						} 
					}
					State = 188;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
				}
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 189;
					Match(COMMA);
					}
				}

				State = 192;
				Match(RCURLYBRACKET);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 196;
				switchStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 197;
				variableDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 198;
				arrayDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 199;
				expressionStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 200;
				whileStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 201;
				block();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 202;
				forStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 203;
				doWhileStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 204;
				returnStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 205;
				breakStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 206;
				continueStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACKET() { return GetToken(ParserRulesParser.LCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACKET() { return GetToken(ParserRulesParser.RCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(LCURLYBRACKET);
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 381935171810623488L) != 0)) {
				{
				{
				State = 210;
				statement();
				}
				}
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 216;
			Match(RCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ParserRulesParser.SEMICOLON, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			expression();
			State = 219;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ParserRulesParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(ParserRulesParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(ParserRulesParser.RPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			Match(WHILE);
			State = 222;
			Match(LPARENTHESIS);
			State = 223;
			expression();
			State = 224;
			Match(RPARENTHESIS);
			State = 225;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ParserRulesParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(ParserRulesParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(ParserRulesParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(ParserRulesParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(ParserRulesParser.RPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			Match(FOR);
			State = 228;
			Match(LPARENTHESIS);
			State = 231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE:
				{
				State = 229;
				variableDeclaration();
				}
				break;
			case SEMICOLON:
				{
				State = 230;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 360296769554219008L) != 0)) {
				{
				State = 233;
				expression();
				}
			}

			State = 236;
			Match(SEMICOLON);
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 360296769554219008L) != 0)) {
				{
				State = 237;
				expression();
				}
			}

			State = 240;
			Match(RPARENTHESIS);
			State = 241;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(ParserRulesParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ParserRulesParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(ParserRulesParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(ParserRulesParser.RPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ParserRulesParser.SEMICOLON, 0); }
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(DO);
			State = 244;
			statement();
			State = 245;
			Match(WHILE);
			State = 246;
			Match(LPARENTHESIS);
			State = 247;
			expression();
			State = 248;
			Match(RPARENTHESIS);
			State = 249;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(ParserRulesParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(ParserRulesParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(ParserRulesParser.RPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACKET() { return GetToken(ParserRulesParser.LCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext[] @case() {
			return GetRuleContexts<CaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case(int i) {
			return GetRuleContext<CaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACKET() { return GetToken(ParserRulesParser.RCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(ParserRulesParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ParserRulesParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(SWITCH);
			State = 252;
			Match(LPARENTHESIS);
			State = 253;
			expression();
			State = 254;
			Match(RPARENTHESIS);
			State = 255;
			Match(LCURLYBRACKET);
			State = 256;
			@case();
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 382498121764044800L) != 0)) {
				{
				{
				State = 259;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CASE:
					{
					State = 257;
					@case();
					}
					break;
				case DECIMAL:
				case UNARYOP:
				case TYPE:
				case TRUE:
				case FALSE:
				case FOR:
				case LCURLYBRACKET:
				case LPARENTHESIS:
				case WHILE:
				case DO:
				case SWITCH:
				case CONTINUE:
				case BREAK:
				case RETURN:
				case NUMBER:
				case IDENTIFIER:
					{
					State = 258;
					statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 266;
				Match(DEFAULT);
				State = 267;
				Match(COLON);
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 381935171810623488L) != 0)) {
					{
					{
					State = 268;
					statement();
					}
					}
					State = 273;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 276;
			Match(RCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(ParserRulesParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ParserRulesParser.COLON, 0); }
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 30, RULE_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			Match(CASE);
			State = 279;
			expression();
			State = 280;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ParserRulesParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ParserRulesParser.SEMICOLON, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			Match(RETURN);
			State = 283;
			expression();
			State = 284;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(ParserRulesParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ParserRulesParser.SEMICOLON, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			Match(BREAK);
			State = 287;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(ParserRulesParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ParserRulesParser.SEMICOLON, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(CONTINUE);
			State = 290;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TernaryContext ternary() {
			return GetRuleContext<TernaryContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			ternary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TernaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryContext binary() {
			return GetRuleContext<BinaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTIONMARK() { return GetToken(ParserRulesParser.QUESTIONMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ParserRulesParser.COLON, 0); }
		public TernaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternary; } }
	}

	[RuleVersion(0)]
	public TernaryContext ternary() {
		TernaryContext _localctx = new TernaryContext(Context, State);
		EnterRule(_localctx, 40, RULE_ternary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			binary();
			State = 300;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 295;
				Match(QUESTIONMARK);
				State = 296;
				expression();
				State = 297;
				Match(COLON);
				State = 298;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext[] primary() {
			return GetRuleContexts<PrimaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary(int i) {
			return GetRuleContext<PrimaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARYMATH() { return GetToken(ParserRulesParser.BINARYMATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARYBITWISE() { return GetToken(ParserRulesParser.BINARYBITWISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARYLOGIC() { return GetToken(ParserRulesParser.BINARYLOGIC, 0); }
		public BinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary; } }
	}

	[RuleVersion(0)]
	public BinaryContext binary() {
		BinaryContext _localctx = new BinaryContext(Context, State);
		EnterRule(_localctx, 42, RULE_binary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			primary();
			State = 305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 303;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 469762048L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 304;
				primary();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ParserRulesParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(ParserRulesParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupingContext grouping() {
			return GetRuleContext<GroupingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeCastContext typeCast() {
			return GetRuleContext<TypeCastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(ParserRulesParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(ParserRulesParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignmentContext arrayAssignment() {
			return GetRuleContext<ArrayAssignmentContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 44, RULE_primary);
		try {
			State = 320;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 307;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308;
				Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 309;
				Match(DECIMAL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 310;
				call();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 311;
				grouping();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 312;
				unary();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 313;
				assignment();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 314;
				arrayAccess();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 315;
				fieldAccess();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 316;
				typeCast();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 317;
				Match(TRUE);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 318;
				Match(FALSE);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 319;
				arrayAssignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNARYOP() { return GetToken(ParserRulesParser.UNARYOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 46, RULE_unary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			Match(UNARYOP);
			State = 323;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(ParserRulesParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(ParserRulesParser.RPARENTHESIS, 0); }
		public GroupingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping; } }
	}

	[RuleVersion(0)]
	public GroupingContext grouping() {
		GroupingContext _localctx = new GroupingContext(Context, State);
		EnterRule(_localctx, 48, RULE_grouping);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			Match(LPARENTHESIS);
			State = 326;
			expression();
			State = 327;
			Match(RPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUAREBRACKET() { return GetToken(ParserRulesParser.LSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUAREBRACKET() { return GetToken(ParserRulesParser.RSQUAREBRACKET, 0); }
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 50, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			Match(IDENTIFIER);
			State = 330;
			Match(LSQUAREBRACKET);
			State = 331;
			expression();
			State = 332;
			Match(RSQUAREBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(ParserRulesParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(ParserRulesParser.RPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserRulesParser.COMMA, i);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 52, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			Match(IDENTIFIER);
			State = 335;
			Match(LPARENTHESIS);
			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 360296769554219008L) != 0)) {
				{
				State = 336;
				expression();
				State = 341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 337;
					Match(COMMA);
					State = 338;
					expression();
					}
					}
					State = 343;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 346;
			Match(RPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeCastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(ParserRulesParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(ParserRulesParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(ParserRulesParser.RPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeCastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeCast; } }
	}

	[RuleVersion(0)]
	public TypeCastContext typeCast() {
		TypeCastContext _localctx = new TypeCastContext(Context, State);
		EnterRule(_localctx, 54, RULE_typeCast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			Match(LPARENTHESIS);
			State = 349;
			Match(TYPE);
			State = 350;
			Match(RPARENTHESIS);
			State = 351;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ParserRulesParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARYMATH() { return GetToken(ParserRulesParser.BINARYMATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARYBITWISE() { return GetToken(ParserRulesParser.BINARYBITWISE, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 56, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			Match(IDENTIFIER);
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BINARYMATH || _la==BINARYBITWISE) {
				{
				State = 354;
				_la = TokenStream.LA(1);
				if ( !(_la==BINARYMATH || _la==BINARYBITWISE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 357;
			Match(EQUAL);
			State = 358;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ParserRulesParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ParserRulesParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ParserRulesParser.DOT, 0); }
		public FieldAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess; } }
	}

	[RuleVersion(0)]
	public FieldAccessContext fieldAccess() {
		FieldAccessContext _localctx = new FieldAccessContext(Context, State);
		EnterRule(_localctx, 58, RULE_fieldAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			Match(IDENTIFIER);
			State = 361;
			Match(DOT);
			State = 362;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,59,365,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,1,0,5,0,62,8,0,10,0,12,0,65,9,0,1,1,1,1,1,1,1,1,1,1,3,1,72,8,
		1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,80,8,2,1,2,1,2,4,2,84,8,2,11,2,12,2,85,1,
		2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,96,8,3,1,3,1,3,1,3,1,3,3,3,102,8,3,5,
		3,104,8,3,10,3,12,3,107,9,3,1,3,3,3,110,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,5,4,122,8,4,10,4,12,4,125,9,4,3,4,127,8,4,1,4,1,4,1,4,5,
		4,132,8,4,10,4,12,4,135,9,4,1,4,1,4,1,5,1,5,1,5,3,5,142,8,5,1,5,1,5,1,
		5,3,5,147,8,5,5,5,149,8,5,10,5,12,5,152,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
		6,3,6,161,8,6,1,6,1,6,1,6,3,6,166,8,6,5,6,168,8,6,10,6,12,6,171,9,6,1,
		6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,185,8,7,10,7,12,7,188,
		9,7,1,7,3,7,191,8,7,1,7,1,7,3,7,195,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,3,8,208,8,8,1,9,1,9,5,9,212,8,9,10,9,12,9,215,9,9,1,9,1,
		9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,3,12,
		232,8,12,1,12,3,12,235,8,12,1,12,1,12,3,12,239,8,12,1,12,1,12,1,12,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,3,14,260,8,14,5,14,262,8,14,10,14,12,14,265,9,14,1,14,1,14,1,14,5,
		14,270,8,14,10,14,12,14,273,9,14,3,14,275,8,14,1,14,1,14,1,15,1,15,1,15,
		1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,
		1,20,1,20,1,20,1,20,1,20,3,20,301,8,20,1,21,1,21,1,21,3,21,306,8,21,1,
		22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,321,
		8,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,
		1,26,1,26,1,26,1,26,5,26,340,8,26,10,26,12,26,343,9,26,3,26,345,8,26,1,
		26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,3,28,356,8,28,1,28,1,28,1,28,
		1,29,1,29,1,29,1,29,1,29,0,0,30,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,0,2,1,0,26,28,1,0,26,27,392,
		0,63,1,0,0,0,2,71,1,0,0,0,4,73,1,0,0,0,6,89,1,0,0,0,8,113,1,0,0,0,10,138,
		1,0,0,0,12,155,1,0,0,0,14,174,1,0,0,0,16,207,1,0,0,0,18,209,1,0,0,0,20,
		218,1,0,0,0,22,221,1,0,0,0,24,227,1,0,0,0,26,243,1,0,0,0,28,251,1,0,0,
		0,30,278,1,0,0,0,32,282,1,0,0,0,34,286,1,0,0,0,36,289,1,0,0,0,38,292,1,
		0,0,0,40,294,1,0,0,0,42,302,1,0,0,0,44,320,1,0,0,0,46,322,1,0,0,0,48,325,
		1,0,0,0,50,329,1,0,0,0,52,334,1,0,0,0,54,348,1,0,0,0,56,353,1,0,0,0,58,
		360,1,0,0,0,60,62,3,2,1,0,61,60,1,0,0,0,62,65,1,0,0,0,63,61,1,0,0,0,63,
		64,1,0,0,0,64,1,1,0,0,0,65,63,1,0,0,0,66,72,3,4,2,0,67,72,3,6,3,0,68,72,
		3,10,5,0,69,72,3,8,4,0,70,72,3,12,6,0,71,66,1,0,0,0,71,67,1,0,0,0,71,68,
		1,0,0,0,71,69,1,0,0,0,71,70,1,0,0,0,72,3,1,0,0,0,73,74,5,39,0,0,74,75,
		5,58,0,0,75,83,5,33,0,0,76,79,5,29,0,0,77,78,5,35,0,0,78,80,5,36,0,0,79,
		77,1,0,0,0,79,80,1,0,0,0,80,81,1,0,0,0,81,82,5,58,0,0,82,84,5,37,0,0,83,
		76,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,87,1,0,0,0,87,
		88,5,34,0,0,88,5,1,0,0,0,89,90,5,38,0,0,90,91,5,58,0,0,91,92,5,33,0,0,
		92,95,5,58,0,0,93,94,5,40,0,0,94,96,5,56,0,0,95,93,1,0,0,0,95,96,1,0,0,
		0,96,105,1,0,0,0,97,98,5,41,0,0,98,101,5,58,0,0,99,100,5,40,0,0,100,102,
		5,56,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,104,1,0,0,0,103,97,1,0,0,0,
		104,107,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,109,1,0,0,0,107,105,
		1,0,0,0,108,110,5,41,0,0,109,108,1,0,0,0,109,110,1,0,0,0,110,111,1,0,0,
		0,111,112,5,34,0,0,112,7,1,0,0,0,113,114,5,29,0,0,114,115,5,58,0,0,115,
		126,5,43,0,0,116,117,5,29,0,0,117,123,5,58,0,0,118,119,5,41,0,0,119,120,
		5,29,0,0,120,122,5,58,0,0,121,118,1,0,0,0,122,125,1,0,0,0,123,121,1,0,
		0,0,123,124,1,0,0,0,124,127,1,0,0,0,125,123,1,0,0,0,126,116,1,0,0,0,126,
		127,1,0,0,0,127,128,1,0,0,0,128,129,5,44,0,0,129,133,5,33,0,0,130,132,
		3,16,8,0,131,130,1,0,0,0,132,135,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,
		0,134,136,1,0,0,0,135,133,1,0,0,0,136,137,5,34,0,0,137,9,1,0,0,0,138,141,
		5,29,0,0,139,142,5,58,0,0,140,142,3,56,28,0,141,139,1,0,0,0,141,140,1,
		0,0,0,142,150,1,0,0,0,143,146,5,41,0,0,144,147,5,58,0,0,145,147,3,56,28,
		0,146,144,1,0,0,0,146,145,1,0,0,0,147,149,1,0,0,0,148,143,1,0,0,0,149,
		152,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,153,1,0,0,0,152,150,1,
		0,0,0,153,154,5,37,0,0,154,11,1,0,0,0,155,156,5,29,0,0,156,157,5,35,0,
		0,157,160,5,36,0,0,158,161,5,58,0,0,159,161,3,14,7,0,160,158,1,0,0,0,160,
		159,1,0,0,0,161,169,1,0,0,0,162,165,5,41,0,0,163,166,5,58,0,0,164,166,
		3,14,7,0,165,163,1,0,0,0,165,164,1,0,0,0,166,168,1,0,0,0,167,162,1,0,0,
		0,168,171,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,172,1,0,0,0,171,
		169,1,0,0,0,172,173,5,37,0,0,173,13,1,0,0,0,174,175,5,58,0,0,175,194,5,
		40,0,0,176,177,5,35,0,0,177,178,3,38,19,0,178,179,5,36,0,0,179,195,1,0,
		0,0,180,181,5,33,0,0,181,186,3,38,19,0,182,183,5,41,0,0,183,185,3,38,19,
		0,184,182,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,
		190,1,0,0,0,188,186,1,0,0,0,189,191,5,41,0,0,190,189,1,0,0,0,190,191,1,
		0,0,0,191,192,1,0,0,0,192,193,5,34,0,0,193,195,1,0,0,0,194,176,1,0,0,0,
		194,180,1,0,0,0,195,15,1,0,0,0,196,208,3,28,14,0,197,208,3,10,5,0,198,
		208,3,12,6,0,199,208,3,20,10,0,200,208,3,22,11,0,201,208,3,18,9,0,202,
		208,3,24,12,0,203,208,3,26,13,0,204,208,3,32,16,0,205,208,3,34,17,0,206,
		208,3,36,18,0,207,196,1,0,0,0,207,197,1,0,0,0,207,198,1,0,0,0,207,199,
		1,0,0,0,207,200,1,0,0,0,207,201,1,0,0,0,207,202,1,0,0,0,207,203,1,0,0,
		0,207,204,1,0,0,0,207,205,1,0,0,0,207,206,1,0,0,0,208,17,1,0,0,0,209,213,
		5,33,0,0,210,212,3,16,8,0,211,210,1,0,0,0,212,215,1,0,0,0,213,211,1,0,
		0,0,213,214,1,0,0,0,214,216,1,0,0,0,215,213,1,0,0,0,216,217,5,34,0,0,217,
		19,1,0,0,0,218,219,3,38,19,0,219,220,5,37,0,0,220,21,1,0,0,0,221,222,5,
		45,0,0,222,223,5,43,0,0,223,224,3,38,19,0,224,225,5,44,0,0,225,226,3,16,
		8,0,226,23,1,0,0,0,227,228,5,32,0,0,228,231,5,43,0,0,229,232,3,10,5,0,
		230,232,5,37,0,0,231,229,1,0,0,0,231,230,1,0,0,0,232,234,1,0,0,0,233,235,
		3,38,19,0,234,233,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,238,5,37,
		0,0,237,239,3,38,19,0,238,237,1,0,0,0,238,239,1,0,0,0,239,240,1,0,0,0,
		240,241,5,44,0,0,241,242,3,16,8,0,242,25,1,0,0,0,243,244,5,46,0,0,244,
		245,3,16,8,0,245,246,5,45,0,0,246,247,5,43,0,0,247,248,3,38,19,0,248,249,
		5,44,0,0,249,250,5,37,0,0,250,27,1,0,0,0,251,252,5,47,0,0,252,253,5,43,
		0,0,253,254,3,38,19,0,254,255,5,44,0,0,255,256,5,33,0,0,256,263,3,30,15,
		0,257,260,3,30,15,0,258,260,3,16,8,0,259,257,1,0,0,0,259,258,1,0,0,0,260,
		262,1,0,0,0,261,259,1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,
		0,0,0,264,274,1,0,0,0,265,263,1,0,0,0,266,267,5,48,0,0,267,271,5,52,0,
		0,268,270,3,16,8,0,269,268,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,
		272,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,274,266,1,0,0,0,274,275,1,
		0,0,0,275,276,1,0,0,0,276,277,5,34,0,0,277,29,1,0,0,0,278,279,5,49,0,0,
		279,280,3,38,19,0,280,281,5,52,0,0,281,31,1,0,0,0,282,283,5,54,0,0,283,
		284,3,38,19,0,284,285,5,37,0,0,285,33,1,0,0,0,286,287,5,51,0,0,287,288,
		5,37,0,0,288,35,1,0,0,0,289,290,5,50,0,0,290,291,5,37,0,0,291,37,1,0,0,
		0,292,293,3,40,20,0,293,39,1,0,0,0,294,300,3,42,21,0,295,296,5,53,0,0,
		296,297,3,38,19,0,297,298,5,52,0,0,298,299,3,38,19,0,299,301,1,0,0,0,300,
		295,1,0,0,0,300,301,1,0,0,0,301,41,1,0,0,0,302,305,3,44,22,0,303,304,7,
		0,0,0,304,306,3,44,22,0,305,303,1,0,0,0,305,306,1,0,0,0,306,43,1,0,0,0,
		307,321,5,58,0,0,308,321,5,56,0,0,309,321,5,24,0,0,310,321,3,52,26,0,311,
		321,3,48,24,0,312,321,3,46,23,0,313,321,3,56,28,0,314,321,3,50,25,0,315,
		321,3,58,29,0,316,321,3,54,27,0,317,321,5,30,0,0,318,321,5,31,0,0,319,
		321,3,14,7,0,320,307,1,0,0,0,320,308,1,0,0,0,320,309,1,0,0,0,320,310,1,
		0,0,0,320,311,1,0,0,0,320,312,1,0,0,0,320,313,1,0,0,0,320,314,1,0,0,0,
		320,315,1,0,0,0,320,316,1,0,0,0,320,317,1,0,0,0,320,318,1,0,0,0,320,319,
		1,0,0,0,321,45,1,0,0,0,322,323,5,25,0,0,323,324,3,38,19,0,324,47,1,0,0,
		0,325,326,5,43,0,0,326,327,3,38,19,0,327,328,5,44,0,0,328,49,1,0,0,0,329,
		330,5,58,0,0,330,331,5,35,0,0,331,332,3,38,19,0,332,333,5,36,0,0,333,51,
		1,0,0,0,334,335,5,58,0,0,335,344,5,43,0,0,336,341,3,38,19,0,337,338,5,
		41,0,0,338,340,3,38,19,0,339,337,1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,
		0,341,342,1,0,0,0,342,345,1,0,0,0,343,341,1,0,0,0,344,336,1,0,0,0,344,
		345,1,0,0,0,345,346,1,0,0,0,346,347,5,44,0,0,347,53,1,0,0,0,348,349,5,
		43,0,0,349,350,5,29,0,0,350,351,5,44,0,0,351,352,3,38,19,0,352,55,1,0,
		0,0,353,355,5,58,0,0,354,356,7,1,0,0,355,354,1,0,0,0,355,356,1,0,0,0,356,
		357,1,0,0,0,357,358,5,40,0,0,358,359,3,38,19,0,359,57,1,0,0,0,360,361,
		5,58,0,0,361,362,5,42,0,0,362,363,5,58,0,0,363,59,1,0,0,0,35,63,71,79,
		85,95,101,105,109,123,126,133,141,146,150,160,165,169,186,190,194,207,
		213,231,234,238,259,263,271,274,300,305,320,341,344,355
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
