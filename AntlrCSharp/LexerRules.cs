//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Users//marci//Desktop//Structural Language//AntlrCSharp//LexerRules.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class LexerRules : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		UNARYOP=1, BINARYMATH=2, BINARYBITWISE=3, BINARYLOGIC=4, TYPE=5, MINUS=6, 
		PLUS=7, STAR=8, RSLASH=9, EXCLAMATION=10, AND=11, OR=12, CARROT=13, SHIFTLEFT=14, 
		SHIFTRIGHT=15, ANDAND=16, OROR=17, EQUALEQUAL=18, EXCLAMATIONEQUAL=19, 
		LESSEQUAL=20, GREATEREQUAL=21, LESS=22, GREATER=23, INT=24, FLOAT=25, 
		SHORT=26, CHAR=27, LONG=28, DECIMAL=29, TRUE=30, FALSE=31, FOR=32, LCURLYBRACKET=33, 
		RCURLYBRACKET=34, LSQUAREBRACKET=35, RSQUAREBRACKET=36, SEMICOLON=37, 
		ENUM=38, STRUCT=39, EQUAL=40, COMMA=41, DOT=42, LPARENTHESIS=43, RPARENTHESIS=44, 
		WHILE=45, DO=46, SWITCH=47, DEFAULT=48, CASE=49, CONTINUE=50, BREAK=51, 
		COLON=52, QUESTIONMARK=53, RETURN=54, NUMBER=55, DIGIT=56, IDENTIFIER=57, 
		ALPHA=58, WS=59;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"UNARYOP", "BINARYMATH", "BINARYBITWISE", "BINARYLOGIC", "TYPE", "MINUS", 
		"PLUS", "STAR", "RSLASH", "EXCLAMATION", "AND", "OR", "CARROT", "SHIFTLEFT", 
		"SHIFTRIGHT", "ANDAND", "OROR", "EQUALEQUAL", "EXCLAMATIONEQUAL", "LESSEQUAL", 
		"GREATEREQUAL", "LESS", "GREATER", "INT", "FLOAT", "SHORT", "CHAR", "LONG", 
		"DECIMAL", "TRUE", "FALSE", "FOR", "LCURLYBRACKET", "RCURLYBRACKET", "LSQUAREBRACKET", 
		"RSQUAREBRACKET", "SEMICOLON", "ENUM", "STRUCT", "EQUAL", "COMMA", "DOT", 
		"LPARENTHESIS", "RPARENTHESIS", "WHILE", "DO", "SWITCH", "DEFAULT", "CASE", 
		"CONTINUE", "BREAK", "COLON", "QUESTIONMARK", "RETURN", "NUMBER", "DIGIT", 
		"IDENTIFIER", "ALPHA", "WS"
	};


	public LexerRules(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LexerRules(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'-'", "'+'", "'*'", "'/'", "'!'", 
		"'&'", "'|'", "'^'", "'<<'", "'>>'", "'&&'", "'||'", "'=='", "'!='", "'<='", 
		"'>='", "'<'", "'>'", "'int'", "'float'", "'short'", "'char'", "'long'", 
		"'decimal'", "'true'", "'false'", "'for'", "'{'", "'}'", "'['", "']'", 
		"';'", "'enum'", "'struct'", "'='", "','", "'.'", "'('", "')'", "'while'", 
		"'do'", "'switch'", "'default'", "'case'", "'continue'", "'break'", "':'", 
		"'?'", "'return'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "UNARYOP", "BINARYMATH", "BINARYBITWISE", "BINARYLOGIC", "TYPE", 
		"MINUS", "PLUS", "STAR", "RSLASH", "EXCLAMATION", "AND", "OR", "CARROT", 
		"SHIFTLEFT", "SHIFTRIGHT", "ANDAND", "OROR", "EQUALEQUAL", "EXCLAMATIONEQUAL", 
		"LESSEQUAL", "GREATEREQUAL", "LESS", "GREATER", "INT", "FLOAT", "SHORT", 
		"CHAR", "LONG", "DECIMAL", "TRUE", "FALSE", "FOR", "LCURLYBRACKET", "RCURLYBRACKET", 
		"LSQUAREBRACKET", "RSQUAREBRACKET", "SEMICOLON", "ENUM", "STRUCT", "EQUAL", 
		"COMMA", "DOT", "LPARENTHESIS", "RPARENTHESIS", "WHILE", "DO", "SWITCH", 
		"DEFAULT", "CASE", "CONTINUE", "BREAK", "COLON", "QUESTIONMARK", "RETURN", 
		"NUMBER", "DIGIT", "IDENTIFIER", "ALPHA", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LexerRules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LexerRules() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,59,366,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,1,0,1,0,3,0,122,8,0,1,1,1,1,1,1,1,1,3,1,128,8,
		1,1,2,1,2,1,2,1,2,1,2,3,2,135,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,
		145,8,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,153,8,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
		8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,
		14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,
		19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,
		24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,
		26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
		28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,
		31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,
		37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,
		41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,
		45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,
		47,1,47,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
		49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,
		53,1,53,1,53,1,53,1,53,1,54,4,54,336,8,54,11,54,12,54,337,1,54,1,54,4,
		54,342,8,54,11,54,12,54,343,3,54,346,8,54,1,55,1,55,1,56,1,56,1,56,5,56,
		353,8,56,10,56,12,56,356,9,56,1,57,1,57,1,58,4,58,361,8,58,11,58,12,58,
		362,1,58,1,58,0,0,59,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
		11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
		23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
		35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,
		47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,
		115,58,117,59,1,0,2,3,0,65,90,95,95,97,122,3,0,9,10,13,13,32,32,391,0,
		1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
		0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
		1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
		0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
		1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,
		0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,
		0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,1,121,1,0,0,
		0,3,127,1,0,0,0,5,134,1,0,0,0,7,144,1,0,0,0,9,152,1,0,0,0,11,154,1,0,0,
		0,13,156,1,0,0,0,15,158,1,0,0,0,17,160,1,0,0,0,19,162,1,0,0,0,21,164,1,
		0,0,0,23,166,1,0,0,0,25,168,1,0,0,0,27,170,1,0,0,0,29,173,1,0,0,0,31,176,
		1,0,0,0,33,179,1,0,0,0,35,182,1,0,0,0,37,185,1,0,0,0,39,188,1,0,0,0,41,
		191,1,0,0,0,43,194,1,0,0,0,45,196,1,0,0,0,47,198,1,0,0,0,49,202,1,0,0,
		0,51,208,1,0,0,0,53,214,1,0,0,0,55,219,1,0,0,0,57,224,1,0,0,0,59,232,1,
		0,0,0,61,237,1,0,0,0,63,243,1,0,0,0,65,247,1,0,0,0,67,249,1,0,0,0,69,251,
		1,0,0,0,71,253,1,0,0,0,73,255,1,0,0,0,75,257,1,0,0,0,77,262,1,0,0,0,79,
		269,1,0,0,0,81,271,1,0,0,0,83,273,1,0,0,0,85,275,1,0,0,0,87,277,1,0,0,
		0,89,279,1,0,0,0,91,285,1,0,0,0,93,288,1,0,0,0,95,295,1,0,0,0,97,303,1,
		0,0,0,99,308,1,0,0,0,101,317,1,0,0,0,103,323,1,0,0,0,105,325,1,0,0,0,107,
		327,1,0,0,0,109,335,1,0,0,0,111,347,1,0,0,0,113,349,1,0,0,0,115,357,1,
		0,0,0,117,360,1,0,0,0,119,122,3,11,5,0,120,122,3,19,9,0,121,119,1,0,0,
		0,121,120,1,0,0,0,122,2,1,0,0,0,123,128,3,11,5,0,124,128,3,13,6,0,125,
		128,3,15,7,0,126,128,3,17,8,0,127,123,1,0,0,0,127,124,1,0,0,0,127,125,
		1,0,0,0,127,126,1,0,0,0,128,4,1,0,0,0,129,135,3,21,10,0,130,135,3,23,11,
		0,131,135,3,25,12,0,132,135,3,29,14,0,133,135,3,27,13,0,134,129,1,0,0,
		0,134,130,1,0,0,0,134,131,1,0,0,0,134,132,1,0,0,0,134,133,1,0,0,0,135,
		6,1,0,0,0,136,145,3,31,15,0,137,145,3,33,16,0,138,145,3,35,17,0,139,145,
		3,37,18,0,140,145,3,39,19,0,141,145,3,41,20,0,142,145,3,43,21,0,143,145,
		3,45,22,0,144,136,1,0,0,0,144,137,1,0,0,0,144,138,1,0,0,0,144,139,1,0,
		0,0,144,140,1,0,0,0,144,141,1,0,0,0,144,142,1,0,0,0,144,143,1,0,0,0,145,
		8,1,0,0,0,146,153,3,47,23,0,147,153,3,49,24,0,148,153,3,51,25,0,149,153,
		3,53,26,0,150,153,3,55,27,0,151,153,3,57,28,0,152,146,1,0,0,0,152,147,
		1,0,0,0,152,148,1,0,0,0,152,149,1,0,0,0,152,150,1,0,0,0,152,151,1,0,0,
		0,153,10,1,0,0,0,154,155,5,45,0,0,155,12,1,0,0,0,156,157,5,43,0,0,157,
		14,1,0,0,0,158,159,5,42,0,0,159,16,1,0,0,0,160,161,5,47,0,0,161,18,1,0,
		0,0,162,163,5,33,0,0,163,20,1,0,0,0,164,165,5,38,0,0,165,22,1,0,0,0,166,
		167,5,124,0,0,167,24,1,0,0,0,168,169,5,94,0,0,169,26,1,0,0,0,170,171,5,
		60,0,0,171,172,5,60,0,0,172,28,1,0,0,0,173,174,5,62,0,0,174,175,5,62,0,
		0,175,30,1,0,0,0,176,177,5,38,0,0,177,178,5,38,0,0,178,32,1,0,0,0,179,
		180,5,124,0,0,180,181,5,124,0,0,181,34,1,0,0,0,182,183,5,61,0,0,183,184,
		5,61,0,0,184,36,1,0,0,0,185,186,5,33,0,0,186,187,5,61,0,0,187,38,1,0,0,
		0,188,189,5,60,0,0,189,190,5,61,0,0,190,40,1,0,0,0,191,192,5,62,0,0,192,
		193,5,61,0,0,193,42,1,0,0,0,194,195,5,60,0,0,195,44,1,0,0,0,196,197,5,
		62,0,0,197,46,1,0,0,0,198,199,5,105,0,0,199,200,5,110,0,0,200,201,5,116,
		0,0,201,48,1,0,0,0,202,203,5,102,0,0,203,204,5,108,0,0,204,205,5,111,0,
		0,205,206,5,97,0,0,206,207,5,116,0,0,207,50,1,0,0,0,208,209,5,115,0,0,
		209,210,5,104,0,0,210,211,5,111,0,0,211,212,5,114,0,0,212,213,5,116,0,
		0,213,52,1,0,0,0,214,215,5,99,0,0,215,216,5,104,0,0,216,217,5,97,0,0,217,
		218,5,114,0,0,218,54,1,0,0,0,219,220,5,108,0,0,220,221,5,111,0,0,221,222,
		5,110,0,0,222,223,5,103,0,0,223,56,1,0,0,0,224,225,5,100,0,0,225,226,5,
		101,0,0,226,227,5,99,0,0,227,228,5,105,0,0,228,229,5,109,0,0,229,230,5,
		97,0,0,230,231,5,108,0,0,231,58,1,0,0,0,232,233,5,116,0,0,233,234,5,114,
		0,0,234,235,5,117,0,0,235,236,5,101,0,0,236,60,1,0,0,0,237,238,5,102,0,
		0,238,239,5,97,0,0,239,240,5,108,0,0,240,241,5,115,0,0,241,242,5,101,0,
		0,242,62,1,0,0,0,243,244,5,102,0,0,244,245,5,111,0,0,245,246,5,114,0,0,
		246,64,1,0,0,0,247,248,5,123,0,0,248,66,1,0,0,0,249,250,5,125,0,0,250,
		68,1,0,0,0,251,252,5,91,0,0,252,70,1,0,0,0,253,254,5,93,0,0,254,72,1,0,
		0,0,255,256,5,59,0,0,256,74,1,0,0,0,257,258,5,101,0,0,258,259,5,110,0,
		0,259,260,5,117,0,0,260,261,5,109,0,0,261,76,1,0,0,0,262,263,5,115,0,0,
		263,264,5,116,0,0,264,265,5,114,0,0,265,266,5,117,0,0,266,267,5,99,0,0,
		267,268,5,116,0,0,268,78,1,0,0,0,269,270,5,61,0,0,270,80,1,0,0,0,271,272,
		5,44,0,0,272,82,1,0,0,0,273,274,5,46,0,0,274,84,1,0,0,0,275,276,5,40,0,
		0,276,86,1,0,0,0,277,278,5,41,0,0,278,88,1,0,0,0,279,280,5,119,0,0,280,
		281,5,104,0,0,281,282,5,105,0,0,282,283,5,108,0,0,283,284,5,101,0,0,284,
		90,1,0,0,0,285,286,5,100,0,0,286,287,5,111,0,0,287,92,1,0,0,0,288,289,
		5,115,0,0,289,290,5,119,0,0,290,291,5,105,0,0,291,292,5,116,0,0,292,293,
		5,99,0,0,293,294,5,104,0,0,294,94,1,0,0,0,295,296,5,100,0,0,296,297,5,
		101,0,0,297,298,5,102,0,0,298,299,5,97,0,0,299,300,5,117,0,0,300,301,5,
		108,0,0,301,302,5,116,0,0,302,96,1,0,0,0,303,304,5,99,0,0,304,305,5,97,
		0,0,305,306,5,115,0,0,306,307,5,101,0,0,307,98,1,0,0,0,308,309,5,99,0,
		0,309,310,5,111,0,0,310,311,5,110,0,0,311,312,5,116,0,0,312,313,5,105,
		0,0,313,314,5,110,0,0,314,315,5,117,0,0,315,316,5,101,0,0,316,100,1,0,
		0,0,317,318,5,98,0,0,318,319,5,114,0,0,319,320,5,101,0,0,320,321,5,97,
		0,0,321,322,5,107,0,0,322,102,1,0,0,0,323,324,5,58,0,0,324,104,1,0,0,0,
		325,326,5,63,0,0,326,106,1,0,0,0,327,328,5,114,0,0,328,329,5,101,0,0,329,
		330,5,116,0,0,330,331,5,117,0,0,331,332,5,114,0,0,332,333,5,110,0,0,333,
		108,1,0,0,0,334,336,3,111,55,0,335,334,1,0,0,0,336,337,1,0,0,0,337,335,
		1,0,0,0,337,338,1,0,0,0,338,345,1,0,0,0,339,341,5,46,0,0,340,342,3,111,
		55,0,341,340,1,0,0,0,342,343,1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,
		346,1,0,0,0,345,339,1,0,0,0,345,346,1,0,0,0,346,110,1,0,0,0,347,348,2,
		48,57,0,348,112,1,0,0,0,349,354,3,115,57,0,350,353,3,111,55,0,351,353,
		3,115,57,0,352,350,1,0,0,0,352,351,1,0,0,0,353,356,1,0,0,0,354,352,1,0,
		0,0,354,355,1,0,0,0,355,114,1,0,0,0,356,354,1,0,0,0,357,358,7,0,0,0,358,
		116,1,0,0,0,359,361,7,1,0,0,360,359,1,0,0,0,361,362,1,0,0,0,362,360,1,
		0,0,0,362,363,1,0,0,0,363,364,1,0,0,0,364,365,6,58,0,0,365,118,1,0,0,0,
		12,0,121,127,134,144,152,337,343,345,352,354,362,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
