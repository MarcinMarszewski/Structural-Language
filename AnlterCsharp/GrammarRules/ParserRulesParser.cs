//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ParserRules.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class ParserRulesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DIGIT=1, NUMBER=2, DECIMAL=3, ALPHA=4, IDENTIFIER=5, UNARYOP=6, BINARYMATH=7, 
		BINARYBITWISE=8, BINARYLOGIC=9, TYPE=10, BOOLVAL=11, FOR=12, LCURLYBRACKET=13, 
		RCURLYBRACKET=14, LSQUAREBRACKET=15, RSQUAREBRACKET=16, SEMICOLON=17, 
		ENUM=18, STRUCT=19, EQUAL=20, COMMA=21, DOT=22, LPARENTHESIS=23, RPARENTHESIS=24, 
		WHILE=25, DO=26, SWITCH=27, DEFAULT=28, CASE=29, CONTINUE=30, BREAK=31, 
		COLON=32, QUESTIONMARK=33, RETURN=34, WS=35;
	public const int
		RULE_program = 0, RULE_definition = 1, RULE_structDefinition = 2, RULE_enumerableDefinition = 3, 
		RULE_function = 4, RULE_variableDeclaration = 5, RULE_arrayDeclaration = 6, 
		RULE_arrayAssignment = 7, RULE_statement = 8, RULE_block = 9, RULE_expressionStatement = 10, 
		RULE_whileStatement = 11, RULE_forStatement = 12, RULE_doWhileStatement = 13, 
		RULE_switchStatement = 14, RULE_case = 15, RULE_returnStatement = 16, 
		RULE_breakStatement = 17, RULE_continueStatement = 18, RULE_expression = 19, 
		RULE_ternary = 20, RULE_binary = 21, RULE_primary = 22, RULE_unary = 23, 
		RULE_grouping = 24, RULE_arrayAccess = 25, RULE_call = 26, RULE_typeCast = 27, 
		RULE_assignment = 28, RULE_fieldAccess = 29;
	public static readonly string[] ruleNames = {
		"program", "definition", "structDefinition", "enumerableDefinition", "function", 
		"variableDeclaration", "arrayDeclaration", "arrayAssignment", "statement", 
		"block", "expressionStatement", "whileStatement", "forStatement", "doWhileStatement", 
		"switchStatement", "case", "returnStatement", "breakStatement", "continueStatement", 
		"expression", "ternary", "binary", "primary", "unary", "grouping", "arrayAccess", 
		"call", "typeCast", "assignment", "fieldAccess"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"'for'", "'{'", "'}'", "'['", "']'", "';'", "'enum'", "'struct'", "'='", 
		"','", "'.'", "'('", "')'", "'while'", "'do'", "'switch'", "'default'", 
		"'case'", "'continue'", "'break'", "':'", "'?'", "'return'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DIGIT", "NUMBER", "DECIMAL", "ALPHA", "IDENTIFIER", "UNARYOP", 
		"BINARYMATH", "BINARYBITWISE", "BINARYLOGIC", "TYPE", "BOOLVAL", "FOR", 
		"LCURLYBRACKET", "RCURLYBRACKET", "LSQUAREBRACKET", "RSQUAREBRACKET", 
		"SEMICOLON", "ENUM", "STRUCT", "EQUAL", "COMMA", "DOT", "LPARENTHESIS", 
		"RPARENTHESIS", "WHILE", "DO", "SWITCH", "DEFAULT", "CASE", "CONTINUE", 
		"BREAK", "COLON", "QUESTIONMARK", "RETURN", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ParserRules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ParserRulesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ParserRulesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ParserRulesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << ENUM) | (1L << STRUCT))) != 0)) {
				{
				{
				State = 60;
				definition();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerableDefinitionContext enumerableDefinition() {
			return GetRuleContext<EnumerableDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_definition);
		try {
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66;
				structDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67;
				enumerableDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 68;
				variableDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 69;
				function();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 70;
				arrayDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(ParserRulesParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ParserRulesParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ParserRulesParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACKET() { return GetToken(ParserRulesParser.LCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACKET() { return GetToken(ParserRulesParser.RCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TYPE() { return GetTokens(ParserRulesParser.TYPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE(int i) {
			return GetToken(ParserRulesParser.TYPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(ParserRulesParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(ParserRulesParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LSQUAREBRACKET() { return GetTokens(ParserRulesParser.LSQUAREBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUAREBRACKET(int i) {
			return GetToken(ParserRulesParser.LSQUAREBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RSQUAREBRACKET() { return GetTokens(ParserRulesParser.RSQUAREBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUAREBRACKET(int i) {
			return GetToken(ParserRulesParser.RSQUAREBRACKET, i);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterStructDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitStructDefinition(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(STRUCT);
			State = 74;
			Match(IDENTIFIER);
			State = 75;
			Match(LCURLYBRACKET);
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 76;
				Match(TYPE);
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LSQUAREBRACKET) {
					{
					State = 77;
					Match(LSQUAREBRACKET);
					State = 78;
					Match(RSQUAREBRACKET);
					}
				}

				State = 81;
				Match(IDENTIFIER);
				State = 82;
				Match(SEMICOLON);
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TYPE );
			State = 87;
			Match(RCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerableDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(ParserRulesParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ParserRulesParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ParserRulesParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACKET() { return GetToken(ParserRulesParser.LCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACKET() { return GetToken(ParserRulesParser.RCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(ParserRulesParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(ParserRulesParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(ParserRulesParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(ParserRulesParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserRulesParser.COMMA, i);
		}
		public EnumerableDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerableDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterEnumerableDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitEnumerableDefinition(this);
		}
	}

	[RuleVersion(0)]
	public EnumerableDefinitionContext enumerableDefinition() {
		EnumerableDefinitionContext _localctx = new EnumerableDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_enumerableDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(ENUM);
			State = 90;
			Match(IDENTIFIER);
			State = 91;
			Match(LCURLYBRACKET);
			State = 92;
			Match(IDENTIFIER);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 93;
				Match(EQUAL);
				State = 94;
				Match(NUMBER);
				}
			}

			State = 105;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 97;
					Match(COMMA);
					State = 98;
					Match(IDENTIFIER);
					State = 101;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==EQUAL) {
						{
						State = 99;
						Match(EQUAL);
						State = 100;
						Match(NUMBER);
						}
					}

					}
					} 
				}
				State = 107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 108;
				Match(COMMA);
				}
			}

			State = 111;
			Match(RCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TYPE() { return GetTokens(ParserRulesParser.TYPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE(int i) {
			return GetToken(ParserRulesParser.TYPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ParserRulesParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ParserRulesParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(ParserRulesParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(ParserRulesParser.RPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACKET() { return GetToken(ParserRulesParser.LCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACKET() { return GetToken(ParserRulesParser.RCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserRulesParser.COMMA, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 8, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(TYPE);
			State = 114;
			Match(IDENTIFIER);
			State = 115;
			Match(LPARENTHESIS);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TYPE) {
				{
				State = 116;
				Match(TYPE);
				State = 117;
				Match(IDENTIFIER);
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 118;
					Match(COMMA);
					State = 119;
					Match(TYPE);
					State = 120;
					Match(IDENTIFIER);
					}
					}
					State = 125;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 128;
			Match(RPARENTHESIS);
			State = 129;
			Match(LCURLYBRACKET);
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << DECIMAL) | (1L << IDENTIFIER) | (1L << UNARYOP) | (1L << TYPE) | (1L << BOOLVAL) | (1L << FOR) | (1L << LCURLYBRACKET) | (1L << LPARENTHESIS) | (1L << WHILE) | (1L << DO) | (1L << SWITCH) | (1L << CONTINUE) | (1L << BREAK) | (1L << RETURN))) != 0)) {
				{
				{
				State = 130;
				statement();
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 136;
			Match(RCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(ParserRulesParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ParserRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ParserRulesParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ParserRulesParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserRulesParser.COMMA, i);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(TYPE);
			State = 141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 139;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				{
				State = 140;
				assignment();
				}
				break;
			}
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 143;
				Match(COMMA);
				State = 146;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 144;
					Match(IDENTIFIER);
					}
					break;
				case 2:
					{
					State = 145;
					assignment();
					}
					break;
				}
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 153;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(ParserRulesParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUAREBRACKET() { return GetToken(ParserRulesParser.LSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUAREBRACKET() { return GetToken(ParserRulesParser.RSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ParserRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ParserRulesParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ParserRulesParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignmentContext[] arrayAssignment() {
			return GetRuleContexts<ArrayAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignmentContext arrayAssignment(int i) {
			return GetRuleContext<ArrayAssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserRulesParser.COMMA, i);
		}
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitArrayDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_arrayDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(TYPE);
			State = 156;
			Match(LSQUAREBRACKET);
			State = 157;
			Match(RSQUAREBRACKET);
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 158;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				{
				State = 159;
				arrayAssignment();
				}
				break;
			}
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 162;
				Match(COMMA);
				State = 165;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 163;
					Match(IDENTIFIER);
					}
					break;
				case 2:
					{
					State = 164;
					arrayAssignment();
					}
					break;
				}
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 172;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ParserRulesParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(ParserRulesParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUAREBRACKET() { return GetToken(ParserRulesParser.LSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUAREBRACKET() { return GetToken(ParserRulesParser.RSQUAREBRACKET, 0); }
		public ArrayAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterArrayAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitArrayAssignment(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAssignmentContext arrayAssignment() {
		ArrayAssignmentContext _localctx = new ArrayAssignmentContext(Context, State);
		EnterRule(_localctx, 14, RULE_arrayAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(IDENTIFIER);
			State = 175;
			Match(EQUAL);
			State = 176;
			Match(TYPE);
			State = 177;
			Match(LSQUAREBRACKET);
			State = 178;
			expression();
			State = 179;
			Match(RSQUAREBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		try {
			State = 192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181;
				switchStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182;
				variableDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 183;
				arrayDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 184;
				expressionStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 185;
				whileStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 186;
				block();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 187;
				forStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 188;
				doWhileStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 189;
				returnStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 190;
				breakStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 191;
				continueStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACKET() { return GetToken(ParserRulesParser.LCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACKET() { return GetToken(ParserRulesParser.RCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(LCURLYBRACKET);
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << DECIMAL) | (1L << IDENTIFIER) | (1L << UNARYOP) | (1L << TYPE) | (1L << BOOLVAL) | (1L << FOR) | (1L << LCURLYBRACKET) | (1L << LPARENTHESIS) | (1L << WHILE) | (1L << DO) | (1L << SWITCH) | (1L << CONTINUE) | (1L << BREAK) | (1L << RETURN))) != 0)) {
				{
				{
				State = 195;
				statement();
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 201;
			Match(RCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ParserRulesParser.SEMICOLON, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			expression();
			State = 204;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ParserRulesParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(ParserRulesParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(ParserRulesParser.RPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			Match(WHILE);
			State = 207;
			Match(LPARENTHESIS);
			State = 208;
			expression();
			State = 209;
			Match(RPARENTHESIS);
			State = 210;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ParserRulesParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(ParserRulesParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(ParserRulesParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(ParserRulesParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(ParserRulesParser.RPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(FOR);
			State = 213;
			Match(LPARENTHESIS);
			State = 216;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE:
				{
				State = 214;
				variableDeclaration();
				}
				break;
			case SEMICOLON:
				{
				State = 215;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << DECIMAL) | (1L << IDENTIFIER) | (1L << UNARYOP) | (1L << BOOLVAL) | (1L << LPARENTHESIS))) != 0)) {
				{
				State = 218;
				expression();
				}
			}

			State = 221;
			Match(SEMICOLON);
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << DECIMAL) | (1L << IDENTIFIER) | (1L << UNARYOP) | (1L << BOOLVAL) | (1L << LPARENTHESIS))) != 0)) {
				{
				State = 222;
				expression();
				}
			}

			State = 225;
			Match(RPARENTHESIS);
			State = 226;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(ParserRulesParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ParserRulesParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(ParserRulesParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(ParserRulesParser.RPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ParserRulesParser.SEMICOLON, 0); }
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(DO);
			State = 229;
			statement();
			State = 230;
			Match(WHILE);
			State = 231;
			Match(LPARENTHESIS);
			State = 232;
			expression();
			State = 233;
			Match(RPARENTHESIS);
			State = 234;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(ParserRulesParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(ParserRulesParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(ParserRulesParser.RPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACKET() { return GetToken(ParserRulesParser.LCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext[] @case() {
			return GetRuleContexts<CaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case(int i) {
			return GetRuleContext<CaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACKET() { return GetToken(ParserRulesParser.RCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(ParserRulesParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ParserRulesParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(SWITCH);
			State = 237;
			Match(LPARENTHESIS);
			State = 238;
			expression();
			State = 239;
			Match(RPARENTHESIS);
			State = 240;
			Match(LCURLYBRACKET);
			State = 241;
			@case();
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << DECIMAL) | (1L << IDENTIFIER) | (1L << UNARYOP) | (1L << TYPE) | (1L << BOOLVAL) | (1L << FOR) | (1L << LCURLYBRACKET) | (1L << LPARENTHESIS) | (1L << WHILE) | (1L << DO) | (1L << SWITCH) | (1L << CASE) | (1L << CONTINUE) | (1L << BREAK) | (1L << RETURN))) != 0)) {
				{
				{
				State = 244;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CASE:
					{
					State = 242;
					@case();
					}
					break;
				case NUMBER:
				case DECIMAL:
				case IDENTIFIER:
				case UNARYOP:
				case TYPE:
				case BOOLVAL:
				case FOR:
				case LCURLYBRACKET:
				case LPARENTHESIS:
				case WHILE:
				case DO:
				case SWITCH:
				case CONTINUE:
				case BREAK:
				case RETURN:
					{
					State = 243;
					statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 251;
				Match(DEFAULT);
				State = 252;
				Match(COLON);
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << DECIMAL) | (1L << IDENTIFIER) | (1L << UNARYOP) | (1L << TYPE) | (1L << BOOLVAL) | (1L << FOR) | (1L << LCURLYBRACKET) | (1L << LPARENTHESIS) | (1L << WHILE) | (1L << DO) | (1L << SWITCH) | (1L << CONTINUE) | (1L << BREAK) | (1L << RETURN))) != 0)) {
					{
					{
					State = 253;
					statement();
					}
					}
					State = 258;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 261;
			Match(RCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(ParserRulesParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ParserRulesParser.COLON, 0); }
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitCase(this);
		}
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 30, RULE_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(CASE);
			State = 264;
			expression();
			State = 265;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ParserRulesParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ParserRulesParser.SEMICOLON, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(RETURN);
			State = 268;
			expression();
			State = 269;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(ParserRulesParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ParserRulesParser.SEMICOLON, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			Match(BREAK);
			State = 272;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(ParserRulesParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ParserRulesParser.SEMICOLON, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			Match(CONTINUE);
			State = 275;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TernaryContext ternary() {
			return GetRuleContext<TernaryContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			ternary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TernaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryContext binary() {
			return GetRuleContext<BinaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTIONMARK() { return GetToken(ParserRulesParser.QUESTIONMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ParserRulesParser.COLON, 0); }
		public TernaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitTernary(this);
		}
	}

	[RuleVersion(0)]
	public TernaryContext ternary() {
		TernaryContext _localctx = new TernaryContext(Context, State);
		EnterRule(_localctx, 40, RULE_ternary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			binary();
			State = 285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 280;
				Match(QUESTIONMARK);
				State = 281;
				expression();
				State = 282;
				Match(COLON);
				State = 283;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext[] primary() {
			return GetRuleContexts<PrimaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary(int i) {
			return GetRuleContext<PrimaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARYMATH() { return GetToken(ParserRulesParser.BINARYMATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARYBITWISE() { return GetToken(ParserRulesParser.BINARYBITWISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARYLOGIC() { return GetToken(ParserRulesParser.BINARYLOGIC, 0); }
		public BinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitBinary(this);
		}
	}

	[RuleVersion(0)]
	public BinaryContext binary() {
		BinaryContext _localctx = new BinaryContext(Context, State);
		EnterRule(_localctx, 42, RULE_binary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			primary();
			State = 290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 288;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BINARYMATH) | (1L << BINARYBITWISE) | (1L << BINARYLOGIC))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 289;
				primary();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ParserRulesParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(ParserRulesParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupingContext grouping() {
			return GetRuleContext<GroupingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeCastContext typeCast() {
			return GetRuleContext<TypeCastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLVAL() { return GetToken(ParserRulesParser.BOOLVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignmentContext arrayAssignment() {
			return GetRuleContext<ArrayAssignmentContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 44, RULE_primary);
		try {
			State = 304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293;
				Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 294;
				Match(DECIMAL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 295;
				call();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 296;
				grouping();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 297;
				unary();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 298;
				assignment();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 299;
				arrayAccess();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 300;
				fieldAccess();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 301;
				typeCast();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 302;
				Match(BOOLVAL);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 303;
				arrayAssignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNARYOP() { return GetToken(ParserRulesParser.UNARYOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitUnary(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 46, RULE_unary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(UNARYOP);
			State = 307;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(ParserRulesParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(ParserRulesParser.RPARENTHESIS, 0); }
		public GroupingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterGrouping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitGrouping(this);
		}
	}

	[RuleVersion(0)]
	public GroupingContext grouping() {
		GroupingContext _localctx = new GroupingContext(Context, State);
		EnterRule(_localctx, 48, RULE_grouping);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(LPARENTHESIS);
			State = 310;
			expression();
			State = 311;
			Match(RPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUAREBRACKET() { return GetToken(ParserRulesParser.LSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUAREBRACKET() { return GetToken(ParserRulesParser.RSQUAREBRACKET, 0); }
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 50, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			Match(IDENTIFIER);
			State = 314;
			Match(LSQUAREBRACKET);
			State = 315;
			expression();
			State = 316;
			Match(RSQUAREBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(ParserRulesParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(ParserRulesParser.RPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserRulesParser.COMMA, i);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 52, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			Match(IDENTIFIER);
			State = 319;
			Match(LPARENTHESIS);
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << DECIMAL) | (1L << IDENTIFIER) | (1L << UNARYOP) | (1L << BOOLVAL) | (1L << LPARENTHESIS))) != 0)) {
				{
				State = 320;
				expression();
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 321;
					Match(COMMA);
					State = 322;
					expression();
					}
					}
					State = 327;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 330;
			Match(RPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeCastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(ParserRulesParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(ParserRulesParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(ParserRulesParser.RPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeCastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeCast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterTypeCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitTypeCast(this);
		}
	}

	[RuleVersion(0)]
	public TypeCastContext typeCast() {
		TypeCastContext _localctx = new TypeCastContext(Context, State);
		EnterRule(_localctx, 54, RULE_typeCast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			Match(LPARENTHESIS);
			State = 333;
			Match(TYPE);
			State = 334;
			Match(RPARENTHESIS);
			State = 335;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ParserRulesParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARYMATH() { return GetToken(ParserRulesParser.BINARYMATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARYBITWISE() { return GetToken(ParserRulesParser.BINARYBITWISE, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 56, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			Match(IDENTIFIER);
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BINARYMATH || _la==BINARYBITWISE) {
				{
				State = 338;
				_la = TokenStream.LA(1);
				if ( !(_la==BINARYMATH || _la==BINARYBITWISE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 341;
			Match(EQUAL);
			State = 342;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ParserRulesParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ParserRulesParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ParserRulesParser.DOT, 0); }
		public FieldAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.EnterFieldAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserRulesListener typedListener = listener as IParserRulesListener;
			if (typedListener != null) typedListener.ExitFieldAccess(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccessContext fieldAccess() {
		FieldAccessContext _localctx = new FieldAccessContext(Context, State);
		EnterRule(_localctx, 58, RULE_fieldAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			Match(IDENTIFIER);
			State = 345;
			Match(DOT);
			State = 346;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '%', '\x15F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x3', 
		'\x2', '\a', '\x2', '@', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x43', 
		'\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', 'J', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'R', '\n', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x6', '\x4', 'V', '\n', '\x4', '\r', 
		'\x4', '\xE', '\x4', 'W', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x62', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', 'h', '\n', '\x5', '\a', '\x5', 'j', '\n', 
		'\x5', '\f', '\x5', '\xE', '\x5', 'm', '\v', '\x5', '\x3', '\x5', '\x5', 
		'\x5', 'p', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', '|', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', '\x7F', '\v', '\x6', '\x5', '\x6', '\x81', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x86', '\n', '\x6', '\f', 
		'\x6', '\xE', '\x6', '\x89', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x90', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x95', '\n', '\a', 
		'\a', '\a', '\x97', '\n', '\a', '\f', '\a', '\xE', '\a', '\x9A', '\v', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\xA3', '\n', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\xA8', '\n', '\b', '\a', '\b', 
		'\xAA', '\n', '\b', '\f', '\b', '\xE', '\b', '\xAD', '\v', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xC3', '\n', '\n', 
		'\x3', '\v', '\x3', '\v', '\a', '\v', '\xC7', '\n', '\v', '\f', '\v', 
		'\xE', '\v', '\xCA', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\xDB', '\n', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\xDE', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\xE2', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\xF7', '\n', '\x10', '\a', '\x10', '\xF9', '\n', 
		'\x10', '\f', '\x10', '\xE', '\x10', '\xFC', '\v', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x101', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\x104', '\v', '\x10', '\x5', '\x10', '\x106', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x120', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x125', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x133', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', 
		'\x1C', '\x146', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x149', '\v', 
		'\x1C', '\x5', '\x1C', '\x14B', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x156', '\n', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x2', '\x2', ' ', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '\x2', '\x4', '\x3', '\x2', 
		'\t', '\v', '\x3', '\x2', '\t', '\n', '\x2', '\x176', '\x2', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x4', 'I', '\x3', '\x2', '\x2', '\x2', '\x6', 'K', 
		'\x3', '\x2', '\x2', '\x2', '\b', '[', '\x3', '\x2', '\x2', '\x2', '\n', 
		's', '\x3', '\x2', '\x2', '\x2', '\f', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x10', '\xB0', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xC2', '\x3', '\x2', '\x2', '\x2', '\x14', '\xC4', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xCD', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xD0', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xE6', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xEE', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\x10D', '\x3', '\x2', '\x2', '\x2', '$', '\x111', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x114', '\x3', '\x2', '\x2', '\x2', '(', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x119', '\x3', '\x2', '\x2', '\x2', 
		',', '\x121', '\x3', '\x2', '\x2', '\x2', '.', '\x132', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x134', '\x3', '\x2', '\x2', '\x2', '\x32', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x140', '\x3', '\x2', '\x2', '\x2', '\x38', '\x14E', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x153', '\x3', '\x2', '\x2', '\x2', '<', '\x15A', 
		'\x3', '\x2', '\x2', '\x2', '>', '@', '\x5', '\x4', '\x3', '\x2', '?', 
		'>', '\x3', '\x2', '\x2', '\x2', '@', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x3', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x44', 'J', '\x5', '\x6', '\x4', '\x2', '\x45', 
		'J', '\x5', '\b', '\x5', '\x2', '\x46', 'J', '\x5', '\f', '\a', '\x2', 
		'G', 'J', '\x5', '\n', '\x6', '\x2', 'H', 'J', '\x5', '\xE', '\b', '\x2', 
		'I', '\x44', '\x3', '\x2', '\x2', '\x2', 'I', '\x45', '\x3', '\x2', '\x2', 
		'\x2', 'I', '\x46', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'H', '\x3', '\x2', '\x2', '\x2', 'J', '\x5', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'L', '\a', '\x15', '\x2', '\x2', 'L', 'M', '\a', 
		'\a', '\x2', '\x2', 'M', 'U', '\a', '\xF', '\x2', '\x2', 'N', 'Q', '\a', 
		'\f', '\x2', '\x2', 'O', 'P', '\a', '\x11', '\x2', '\x2', 'P', 'R', '\a', 
		'\x12', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', 
		'\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 
		'T', '\a', '\a', '\x2', '\x2', 'T', 'V', '\a', '\x13', '\x2', '\x2', 'U', 
		'N', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 
		'W', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 
		'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '\x10', '\x2', '\x2', 
		'Z', '\a', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', '\x14', '\x2', 
		'\x2', '\\', ']', '\a', '\a', '\x2', '\x2', ']', '^', '\a', '\xF', '\x2', 
		'\x2', '^', '\x61', '\a', '\a', '\x2', '\x2', '_', '`', '\a', '\x16', 
		'\x2', '\x2', '`', '\x62', '\a', '\x4', '\x2', '\x2', '\x61', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'k', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\a', '\x17', '\x2', 
		'\x2', '\x64', 'g', '\a', '\a', '\x2', '\x2', '\x65', '\x66', '\a', '\x16', 
		'\x2', '\x2', '\x66', 'h', '\a', '\x4', '\x2', '\x2', 'g', '\x65', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'i', '\x63', '\x3', '\x2', '\x2', '\x2', 'j', 'm', 
		'\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 
		'l', '\x3', '\x2', '\x2', '\x2', 'l', 'o', '\x3', '\x2', '\x2', '\x2', 
		'm', 'k', '\x3', '\x2', '\x2', '\x2', 'n', 'p', '\a', '\x17', '\x2', '\x2', 
		'o', 'n', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 
		'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\a', '\x10', '\x2', '\x2', 
		'r', '\t', '\x3', '\x2', '\x2', '\x2', 's', 't', '\a', '\f', '\x2', '\x2', 
		't', 'u', '\a', '\a', '\x2', '\x2', 'u', '\x80', '\a', '\x19', '\x2', 
		'\x2', 'v', 'w', '\a', '\f', '\x2', '\x2', 'w', '}', '\a', '\a', '\x2', 
		'\x2', 'x', 'y', '\a', '\x17', '\x2', '\x2', 'y', 'z', '\a', '\f', '\x2', 
		'\x2', 'z', '|', '\a', '\a', '\x2', '\x2', '{', 'x', '\x3', '\x2', '\x2', 
		'\x2', '|', '\x7F', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', 
		'\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'v', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\a', 
		'\x1A', '\x2', '\x2', '\x83', '\x87', '\a', '\xF', '\x2', '\x2', '\x84', 
		'\x86', '\x5', '\x12', '\n', '\x2', '\x85', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x89', '\x3', '\x2', '\x2', '\x2', '\x87', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x89', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8B', '\a', '\x10', '\x2', '\x2', '\x8B', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8F', '\a', '\f', '\x2', '\x2', '\x8D', 
		'\x90', '\a', '\a', '\x2', '\x2', '\x8E', '\x90', '\x5', ':', '\x1E', 
		'\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x98', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x94', '\a', '\x17', '\x2', '\x2', '\x92', '\x95', '\a', '\a', '\x2', 
		'\x2', '\x93', '\x95', '\x5', ':', '\x1E', '\x2', '\x94', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x96', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9C', '\a', '\x13', '\x2', '\x2', '\x9C', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', '\f', '\x2', '\x2', '\x9E', 
		'\x9F', '\a', '\x11', '\x2', '\x2', '\x9F', '\xA2', '\a', '\x12', '\x2', 
		'\x2', '\xA0', '\xA3', '\a', '\a', '\x2', '\x2', '\xA1', '\xA3', '\x5', 
		'\x10', '\t', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA7', '\a', '\x17', '\x2', '\x2', '\xA5', '\xA8', '\a', 
		'\a', '\x2', '\x2', '\xA6', '\xA8', '\x5', '\x10', '\t', '\x2', '\xA7', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xAF', '\a', '\x13', '\x2', '\x2', '\xAF', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\a', '\a', '\x2', 
		'\x2', '\xB1', '\xB2', '\a', '\x16', '\x2', '\x2', '\xB2', '\xB3', '\a', 
		'\f', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x11', '\x2', '\x2', '\xB4', 
		'\xB5', '\x5', '(', '\x15', '\x2', '\xB5', '\xB6', '\a', '\x12', '\x2', 
		'\x2', '\xB6', '\x11', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xC3', '\x5', 
		'\x1E', '\x10', '\x2', '\xB8', '\xC3', '\x5', '\f', '\a', '\x2', '\xB9', 
		'\xC3', '\x5', '\xE', '\b', '\x2', '\xBA', '\xC3', '\x5', '\x16', '\f', 
		'\x2', '\xBB', '\xC3', '\x5', '\x18', '\r', '\x2', '\xBC', '\xC3', '\x5', 
		'\x14', '\v', '\x2', '\xBD', '\xC3', '\x5', '\x1A', '\xE', '\x2', '\xBE', 
		'\xC3', '\x5', '\x1C', '\xF', '\x2', '\xBF', '\xC3', '\x5', '\"', '\x12', 
		'\x2', '\xC0', '\xC3', '\x5', '$', '\x13', '\x2', '\xC1', '\xC3', '\x5', 
		'&', '\x14', '\x2', '\xC2', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xBE', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC8', '\a', '\xF', '\x2', 
		'\x2', '\xC5', '\xC7', '\x5', '\x12', '\n', '\x2', '\xC6', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xCC', '\a', '\x10', '\x2', '\x2', '\xCC', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\x5', '(', '\x15', 
		'\x2', '\xCE', '\xCF', '\a', '\x13', '\x2', '\x2', '\xCF', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xD1', '\a', '\x1B', '\x2', '\x2', '\xD1', 
		'\xD2', '\a', '\x19', '\x2', '\x2', '\xD2', '\xD3', '\x5', '(', '\x15', 
		'\x2', '\xD3', '\xD4', '\a', '\x1A', '\x2', '\x2', '\xD4', '\xD5', '\x5', 
		'\x12', '\n', '\x2', '\xD5', '\x19', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD7', '\a', '\xE', '\x2', '\x2', '\xD7', '\xDA', '\a', '\x19', '\x2', 
		'\x2', '\xD8', '\xDB', '\x5', '\f', '\a', '\x2', '\xD9', '\xDB', '\a', 
		'\x13', '\x2', '\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xDE', '\x5', '(', '\x15', '\x2', '\xDD', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE1', '\a', '\x13', '\x2', 
		'\x2', '\xE0', '\xE2', '\x5', '(', '\x15', '\x2', '\xE1', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE2', 
		'\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\a', '\x1A', '\x2', 
		'\x2', '\xE4', '\xE5', '\x5', '\x12', '\n', '\x2', '\xE5', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE7', '\a', '\x1C', '\x2', '\x2', '\xE7', 
		'\xE8', '\x5', '\x12', '\n', '\x2', '\xE8', '\xE9', '\a', '\x1B', '\x2', 
		'\x2', '\xE9', '\xEA', '\a', '\x19', '\x2', '\x2', '\xEA', '\xEB', '\x5', 
		'(', '\x15', '\x2', '\xEB', '\xEC', '\a', '\x1A', '\x2', '\x2', '\xEC', 
		'\xED', '\a', '\x13', '\x2', '\x2', '\xED', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xEF', '\a', '\x1D', '\x2', '\x2', '\xEF', '\xF0', '\a', 
		'\x19', '\x2', '\x2', '\xF0', '\xF1', '\x5', '(', '\x15', '\x2', '\xF1', 
		'\xF2', '\a', '\x1A', '\x2', '\x2', '\xF2', '\xF3', '\a', '\xF', '\x2', 
		'\x2', '\xF3', '\xFA', '\x5', ' ', '\x11', '\x2', '\xF4', '\xF7', '\x5', 
		' ', '\x11', '\x2', '\xF5', '\xF7', '\x5', '\x12', '\n', '\x2', '\xF6', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\x105', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\xFE', '\a', '\x1E', '\x2', '\x2', '\xFE', 
		'\x102', '\a', '\"', '\x2', '\x2', '\xFF', '\x101', '\x5', '\x12', '\n', 
		'\x2', '\x100', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x100', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x103', '\x3', '\x2', '\x2', '\x2', '\x103', '\x106', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x102', '\x3', '\x2', '\x2', '\x2', '\x105', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x107', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', 
		'\a', '\x10', '\x2', '\x2', '\x108', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x10A', '\a', '\x1F', '\x2', '\x2', '\x10A', '\x10B', '\x5', 
		'(', '\x15', '\x2', '\x10B', '\x10C', '\a', '\"', '\x2', '\x2', '\x10C', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\a', '$', '\x2', '\x2', 
		'\x10E', '\x10F', '\x5', '(', '\x15', '\x2', '\x10F', '\x110', '\a', '\x13', 
		'\x2', '\x2', '\x110', '#', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', 
		'\a', '!', '\x2', '\x2', '\x112', '\x113', '\a', '\x13', '\x2', '\x2', 
		'\x113', '%', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\a', ' ', 
		'\x2', '\x2', '\x115', '\x116', '\a', '\x13', '\x2', '\x2', '\x116', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\x5', '*', '\x16', '\x2', 
		'\x118', ')', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11F', '\x5', ',', 
		'\x17', '\x2', '\x11A', '\x11B', '\a', '#', '\x2', '\x2', '\x11B', '\x11C', 
		'\x5', '(', '\x15', '\x2', '\x11C', '\x11D', '\a', '\"', '\x2', '\x2', 
		'\x11D', '\x11E', '\x5', '(', '\x15', '\x2', '\x11E', '\x120', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11F', 
		'\x120', '\x3', '\x2', '\x2', '\x2', '\x120', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x121', '\x124', '\x5', '.', '\x18', '\x2', '\x122', '\x123', 
		'\t', '\x2', '\x2', '\x2', '\x123', '\x125', '\x5', '.', '\x18', '\x2', 
		'\x124', '\x122', '\x3', '\x2', '\x2', '\x2', '\x124', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '-', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x133', '\a', '\a', '\x2', '\x2', '\x127', '\x133', '\a', '\x4', '\x2', 
		'\x2', '\x128', '\x133', '\a', '\x5', '\x2', '\x2', '\x129', '\x133', 
		'\x5', '\x36', '\x1C', '\x2', '\x12A', '\x133', '\x5', '\x32', '\x1A', 
		'\x2', '\x12B', '\x133', '\x5', '\x30', '\x19', '\x2', '\x12C', '\x133', 
		'\x5', ':', '\x1E', '\x2', '\x12D', '\x133', '\x5', '\x34', '\x1B', '\x2', 
		'\x12E', '\x133', '\x5', '<', '\x1F', '\x2', '\x12F', '\x133', '\x5', 
		'\x38', '\x1D', '\x2', '\x130', '\x133', '\a', '\r', '\x2', '\x2', '\x131', 
		'\x133', '\x5', '\x10', '\t', '\x2', '\x132', '\x126', '\x3', '\x2', '\x2', 
		'\x2', '\x132', '\x127', '\x3', '\x2', '\x2', '\x2', '\x132', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x132', '\x12B', '\x3', 
		'\x2', '\x2', '\x2', '\x132', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'\x12D', '\x3', '\x2', '\x2', '\x2', '\x132', '\x12E', '\x3', '\x2', '\x2', 
		'\x2', '\x132', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x132', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\x133', '/', '\x3', '\x2', '\x2', '\x2', '\x134', '\x135', '\a', '\b', 
		'\x2', '\x2', '\x135', '\x136', '\x5', '(', '\x15', '\x2', '\x136', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\a', '\x19', '\x2', '\x2', 
		'\x138', '\x139', '\x5', '(', '\x15', '\x2', '\x139', '\x13A', '\a', '\x1A', 
		'\x2', '\x2', '\x13A', '\x33', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', 
		'\a', '\a', '\x2', '\x2', '\x13C', '\x13D', '\a', '\x11', '\x2', '\x2', 
		'\x13D', '\x13E', '\x5', '(', '\x15', '\x2', '\x13E', '\x13F', '\a', '\x12', 
		'\x2', '\x2', '\x13F', '\x35', '\x3', '\x2', '\x2', '\x2', '\x140', '\x141', 
		'\a', '\a', '\x2', '\x2', '\x141', '\x14A', '\a', '\x19', '\x2', '\x2', 
		'\x142', '\x147', '\x5', '(', '\x15', '\x2', '\x143', '\x144', '\a', '\x17', 
		'\x2', '\x2', '\x144', '\x146', '\x5', '(', '\x15', '\x2', '\x145', '\x143', 
		'\x3', '\x2', '\x2', '\x2', '\x146', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x147', '\x145', '\x3', '\x2', '\x2', '\x2', '\x147', '\x148', '\x3', 
		'\x2', '\x2', '\x2', '\x148', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x149', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x142', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14C', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\a', '\x1A', '\x2', '\x2', 
		'\x14D', '\x37', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', '\a', '\x19', 
		'\x2', '\x2', '\x14F', '\x150', '\a', '\f', '\x2', '\x2', '\x150', '\x151', 
		'\a', '\x1A', '\x2', '\x2', '\x151', '\x152', '\x5', '(', '\x15', '\x2', 
		'\x152', '\x39', '\x3', '\x2', '\x2', '\x2', '\x153', '\x155', '\a', '\a', 
		'\x2', '\x2', '\x154', '\x156', '\t', '\x3', '\x2', '\x2', '\x155', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\x3', '\x2', '\x2', '\x2', 
		'\x156', '\x157', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\a', 
		'\x16', '\x2', '\x2', '\x158', '\x159', '\x5', '(', '\x15', '\x2', '\x159', 
		';', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\a', '\a', '\x2', 
		'\x2', '\x15B', '\x15C', '\a', '\x18', '\x2', '\x2', '\x15C', '\x15D', 
		'\a', '\a', '\x2', '\x2', '\x15D', '=', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\x41', 'I', 'Q', 'W', '\x61', 'g', 'k', 'o', '}', '\x80', '\x87', '\x8F', 
		'\x94', '\x98', '\xA2', '\xA7', '\xAB', '\xC2', '\xC8', '\xDA', '\xDD', 
		'\xE1', '\xF6', '\xFA', '\x102', '\x105', '\x11F', '\x124', '\x132', '\x147', 
		'\x14A', '\x155',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
